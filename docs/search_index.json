[["index.html", "My Bookdown Demo My Intro", " My Bookdown Demo Tess Noble Strohm 2023-03-01 My Intro This is my example of a bookdown document. Blah blah blah. the first ‚Äúchapter‚Äù is unnumbered (with the ‚Äú{-}‚Äù), and this R markdown (as the first page) MUST be called ‚Äúindex.Rmd‚Äù. "],["apis-and-iteration-week-3.html", "Chapter 1 API‚Äôs and Iteration (week 3) 1.1 APIs 1.2 Functions 1.3 Function Defaults 1.4 Iterations 1.5 Mapping", " Chapter 1 API‚Äôs and Iteration (week 3) 1.0.1 Lesson Objectives In this lesson we will download data using an application programming interface (API), create our own functions, and iterate using for loops and map(). To fulfill these objectives we will be utilizing two park visitation data sets from the National Park Service (NPS): NPS-wide visitation data, and park unit-specific visitation data. There are seven exercises in this lesson that must be completed. 1.1 APIs An API is software that acts as an intermediary between an online data warehouse (or server) and its users (or clients). As data scientists, APIs provide us a way to request clean and nicely-formatted data that the server will then send to our local computers, all within our RStudio console! To work with APIs, we will need to use two new packages: httr, which allows us to communicate with the API‚Äôs server, and jsonlite, which allows us to work with one of the most common API data formats, JSON. Let‚Äôs go ahead and load in our packages for this lesson: library(tidyverse) library(httr) library(jsonlite) 1.1.1 NPS Visitation Data This week, we will be exploring NPS visitor use data across the NPS system as a whole, and and across specific park units. Like many institutions, NPS has a server that stores all of this information (as well as many other things), and an API for users to be able to access it. To utilize the NPS API in R, we first need to explore its API‚Äôs data structure. In almost every case, we use URLs to access specific data from APIs. To find the access URL for NPS visitation data, go to Stats Rest API - Documentation (though not very intuitive, the NPS API calls its visitation data set ‚ÄúStats‚Äù). Listed there you will see that all data associated with the ‚ÄúStats‚Äù data set can be accessed using the base URL https://irmaservices.nps.gov/v3/rest/stats. From there, you can tack on additional html text to access two different data sets: total/{year} and visitation. For starters, let‚Äôs try accessing the total/{year}. This data set gives us total monthly visitation across all NPS park units, for a user-selected year: https://irmaservices.nps.gov/v3/rest/stats/total/{YEAR} If you tried accessing that URL, you‚Äôll have noticed it doesn‚Äôt take you anywhere. This is because the curly brackets {} signify locations in the URL that need to be updated by the user based on their specific needs. I‚Äôm curious about visitor use in my birth year, so let‚Äôs tweak the URL to access visitation data from 1992. In R, we can access this data using httr‚Äôs GET() function, replacing {YEAR} with 1992. raw_data &lt;- httr::GET(url = &quot;https://irmaservices.nps.gov/v3/rest/stats/total/1992&quot;) # view raw_data View(raw_data) Viewing the data set as-is, you can see it is not super human-readable. This is because data sent from APIs is typically packaged using JavaScript Object Notation (JSON). To unpack the data, we will first need to use httr‚Äôs content() function. In this example, we want the data to be extracted as text, since this is a data table. Moreover, its encoding is listed as UTF-8. The encoding parameter can be found by opening our raw data set in our R console: raw_data # lists &#39;UTF-8&#39; ## Response [https://irmaservices.nps.gov/v3/rest/stats/total/1992] ## Date: 2023-03-01 18:00 ## Status: 200 ## Content-Type: application/json; charset=utf-8 ## Size: 1.42 kB # convert content to text unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) Second, we need to transform this string of text, which is still in JSON formatting, into a data frame using jsonlite‚Äôs fromJSON(): # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(unpacked_data) final_data ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 6209285 10940618 NA NA 1992 ## 2 2 6010027 11931340 NA NA 1992 ## 3 3 6756902 15369139 NA NA 1992 ## 4 4 7255782 21458739 NA NA 1992 ## 5 5 7690763 26648530 NA NA 1992 ## 6 6 7593227 33284625 NA NA 1992 ## 7 7 8438755 41099305 NA NA 1992 ## 8 8 8056823 38625804 NA NA 1992 ## 9 9 7329755 26438266 NA NA 1992 ## 10 10 7105574 23616057 NA NA 1992 ## 11 11 6507805 14338165 NA NA 1992 ## 12 12 6702698 10943961 NA NA 1992 Hooray, you have now successfully pulled in an online data set using an API! üòÅ 1.1.1.1 Exercise #1 Using the code above as a starting point, pull in monthly NPS-wide visitation data for the years 1980, 1999, and 2018. # Creating a fucntion parkwide_visitation &lt;- function(year = 2021){ raw_data &lt;- httr::GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) unpacked_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(unpacked_data) return(final_data) } #test &lt;- parkwide_visitation(year = 2021) # Pulling data from multiple years years = c(1980, 1999, 2018) # Create an empty list to store each year&#39;s parkwide visitation data output_floop &lt;- vector(&quot;list&quot;, length = length(years)) # The &quot;for loops&quot; functions: &quot;for each object listed in the &#39;years&#39; vector...&quot;, then the function we created above, then specifying that the years we are are the years listed, with the &quot;[i]&quot; telling it to do one year after the other (for &#39;i&#39;s&#39; years, put &#39;i&#39;s&#39; output) for (i in 1:length(years)) { output_floop[[i]] &lt;- parkwide_visitation(year = years[i]) } # bind them together into one dataframe yrs_80_99_18 &lt;- output_floop %&gt;% bind_rows() 1.1.1.2 Exercise #2 Now, let‚Äôs explore the second NPS visitation data set, visitation. This call pulls in monthly data for a specific park, across a specific time frame. Use your new API skills to pull in visitation data for Rocky Mountain National Park from 2010 through 2021, based on the API‚Äôs URL template. The unit code for Rocky Mountain National Park is ROMO. (Hint: an API URL can have multiple sections that need to be updated by the user.) rocky_raw_data &lt;- httr::GET(url=&quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=ROMO&amp;startMonth=01&amp;startYear=2010&amp;endMonth=12&amp;endYear=2021&quot;) rocky_unpacked_data &lt;- httr::content(rocky_raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) rocky_final_data &lt;- jsonlite::fromJSON(rocky_unpacked_data) 1.2 Functions You may find yourself thinking, ‚ÄúWow, exercise 1 was overkill!‚Äù Indeed, you had to run several lines of code that were nearly identical to what was shown upstream; the only thing you needed to change from one year to the next was the year itself. This sort of redundant coding is not good coding practice. Instead of copying and pasting many coding steps over and over again and tweaking just a tiny portion of it, we can write functions that combine many coding steps into just one command. The benefits of reducing redundant code in this way are threefold. As Grolemund &amp; Wickham describe in their book, R for Data Science: It‚Äôs easier to see the intent of your code, because your eyes are drawn to what‚Äôs different, not what stays the same. It‚Äôs easier to respond to changes in requirements. As your needs change, you only need to make changes in one place, rather than remembering to change every place that you copied-and-pasted the code. You‚Äôre likely to have fewer bugs because each line of code is used in more places. Functions provide the option of changing just a minor part of the code base from one run to the next. Think of the GET() function in httr: it is a function that has code under-the-hood so that it isn‚Äôt necessary to write out the raw code each time we use it. Instead, we call out the function‚Äôs name (GET()), and the necessary argument within that function that tweaks the code to fit it to our needs (url = \"&lt;SOME_URL_WE_CHOOSE&gt;\"). 1.2.1 Functionize API Pulls Let‚Äôs try making a function called parkwide_visitation() that pulls in NPS-wide visitation data for a year of choice. To develop a function requires specific formatting: #&lt;NAME&gt; &lt;- function(&lt;ARGUMENTS&gt;){ # &lt;ACTIONS&gt; # return(&lt;OUTPUT&gt;) # } ‚Ä¶ where NAME is what we want to name the function; ARGUMENTS are the variables in the code that get ‚Äútweaked‚Äù; ACTIONS are the lines of code we want the function to perform (which includes our ARGUMENTS); and the OUTPUT is the object we want as the final outcome of running the function. For parkwide_visitation(), we will use our upstream code as the basis for our function, but with a few minor yet extremely important tweaks: parkwide_visitation &lt;- function(year){ # pull in the data raw_data &lt;- httr::GET(url = # parse out year so that it can be chosen with the &quot;year&quot; argument, using paste0() paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) # convert content to text extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } In the above function, our first object, raw_data, now changes based on how we define our year argument. We accomplish this through paste0(), which takes listed objects, transforms them into characters (if they aren‚Äôt already), and concatenates them into a single character string. For example: my_sentence &lt;- &quot;I need at least&quot; my_other_sentence &lt;- &quot;pints of ice cream a day&quot; paste0(my_sentence, &quot; &quot;, 08, &quot; &quot;, my_other_sentence, &quot;!&quot;) ## [1] &quot;I need at least 8 pints of ice cream a day!&quot; So, if we make year = 2021 in our parkwide_visitation() function, the year object becomes the number 2021, which makes the paste0() output ‚Äúhttps://irmaservices.nps.gov/v3/rest/stats/total/2021‚Äù, which subsequently pulls data for 2021. In other words, we can now pull visitation data for any year with just one line of code! pull_2018 &lt;- parkwide_visitation(year = 2018) pull_1980 &lt;- parkwide_visitation(year = 1980) pull_1992 &lt;- parkwide_visitation(year = 1992) # ... and so on! 1.2.1.1 Exercise #3 Create a function called unit_visitation() that pulls park-specific visitation data for any park, across any time frame. For a list of all park codes, download this spreadsheet. (Hint 1: functions can have multiple arguments. Hint 2: what‚Äôs the difference between 05 and \"05\"?) #rocky_raw_data &lt;- httr::GET(url=&quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=ROMO&amp;startMonth=01&amp;startYear=2010&amp;endMonth=12&amp;endYear=2021&quot;) # create unit_visitation function unit_visitation &lt;- function(park, start_month = &quot;01&quot;, start_year, end_month = &quot;12&quot;, end_year){ initial_data &lt;- httr::GET( url = paste0( &quot;https://irmaservices.nps.gov/v3/rest/stats/visitation?unitCodes=&quot;, park, &quot;&amp;startMonth=&quot;, start_month, &quot;&amp;startYear=&quot;, start_year, &quot;&amp;endMonth=&quot;, end_month, &quot;&amp;endYear=&quot;, end_year)) # convert to text extracted_data &lt;- httr::content(initial_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame last_data &lt;- jsonlite::fromJSON(extracted_data) return(last_data) } 1.2.1.2 Exercise #4 Using unit_visitation(), pull in visitation data for Rocky Mountain National Park (ROMO), Everglades National Park (EVER), and Theodore Roosevelt National Park (THRO) from 1990 through 2021. # Rocky Mtn unit_visitation(park = &quot;ROMO&quot;, start_year = &quot;1990&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 10956 53565 ROMO Rocky Mountain NP 1990 ## 2 2 9343 49896 ROMO Rocky Mountain NP 1990 ## 3 3 7247 65280 ROMO Rocky Mountain NP 1990 ## 4 4 4681 60274 ROMO Rocky Mountain NP 1990 ## 5 5 11465 108881 ROMO Rocky Mountain NP 1990 ## 6 6 17173 435279 ROMO Rocky Mountain NP 1990 ## 7 7 28031 560806 ROMO Rocky Mountain NP 1990 ## 8 8 30676 646018 ROMO Rocky Mountain NP 1990 ## 9 9 13162 392873 ROMO Rocky Mountain NP 1990 ## 10 10 9608 164130 ROMO Rocky Mountain NP 1990 ## 11 11 5749 73064 ROMO Rocky Mountain NP 1990 ## 12 12 5845 37257 ROMO Rocky Mountain NP 1990 ## 13 1 8071 50910 ROMO Rocky Mountain NP 1991 ## 14 2 6467 57547 ROMO Rocky Mountain NP 1991 ## 15 3 8492 56241 ROMO Rocky Mountain NP 1991 ## 16 4 6231 67986 ROMO Rocky Mountain NP 1991 ## 17 5 13124 118351 ROMO Rocky Mountain NP 1991 ## 18 6 18645 434810 ROMO Rocky Mountain NP 1991 ## 19 7 28663 614118 ROMO Rocky Mountain NP 1991 ## 20 8 25541 642734 ROMO Rocky Mountain NP 1991 ## 21 9 19042 385524 ROMO Rocky Mountain NP 1991 ## 22 10 9185 237608 ROMO Rocky Mountain NP 1991 ## 23 11 2815 43136 ROMO Rocky Mountain NP 1991 ## 24 12 5754 42816 ROMO Rocky Mountain NP 1991 ## 25 1 9398 60038 ROMO Rocky Mountain NP 1992 ## 26 2 9674 48476 ROMO Rocky Mountain NP 1992 ## 27 3 6444 58478 ROMO Rocky Mountain NP 1992 ## 28 4 4797 80217 ROMO Rocky Mountain NP 1992 ## 29 5 11308 160788 ROMO Rocky Mountain NP 1992 ## 30 6 15198 408630 ROMO Rocky Mountain NP 1992 ## 31 7 28690 606764 ROMO Rocky Mountain NP 1992 ## 32 8 24688 623634 ROMO Rocky Mountain NP 1992 ## 33 9 20790 440843 ROMO Rocky Mountain NP 1992 ## 34 10 12764 218570 ROMO Rocky Mountain NP 1992 ## 35 11 4346 47490 ROMO Rocky Mountain NP 1992 ## 36 12 5778 34940 ROMO Rocky Mountain NP 1992 ## 37 1 9015 53780 ROMO Rocky Mountain NP 1993 ## 38 2 8490 39962 ROMO Rocky Mountain NP 1993 ## 39 3 7375 52511 ROMO Rocky Mountain NP 1993 ## 40 4 5256 65790 ROMO Rocky Mountain NP 1993 ## 41 5 7498 120708 ROMO Rocky Mountain NP 1993 ## 42 6 20483 424670 ROMO Rocky Mountain NP 1993 ## 43 7 31510 623451 ROMO Rocky Mountain NP 1993 ## 44 8 36845 654327 ROMO Rocky Mountain NP 1993 ## 45 9 22219 423570 ROMO Rocky Mountain NP 1993 ## 46 10 11741 230972 ROMO Rocky Mountain NP 1993 ## 47 11 4239 48776 ROMO Rocky Mountain NP 1993 ## 48 12 5854 41825 ROMO Rocky Mountain NP 1993 ## 49 1 9492 66336 ROMO Rocky Mountain NP 1994 ## 50 2 8488 46474 ROMO Rocky Mountain NP 1994 ## 51 3 7359 64501 ROMO Rocky Mountain NP 1994 ## 52 4 5214 73383 ROMO Rocky Mountain NP 1994 ## 53 5 12081 140442 ROMO Rocky Mountain NP 1994 ## 54 6 16073 454741 ROMO Rocky Mountain NP 1994 ## 55 7 26679 637208 ROMO Rocky Mountain NP 1994 ## 56 8 38247 691826 ROMO Rocky Mountain NP 1994 ## 57 9 35752 486600 ROMO Rocky Mountain NP 1994 ## 58 10 12793 200637 ROMO Rocky Mountain NP 1994 ## 59 11 6187 65256 ROMO Rocky Mountain NP 1994 ## 60 12 6880 41046 ROMO Rocky Mountain NP 1994 ## 61 1 6110 72264 ROMO Rocky Mountain NP 1995 ## 62 2 6110 55526 ROMO Rocky Mountain NP 1995 ## 63 3 4300 62216 ROMO Rocky Mountain NP 1995 ## 64 4 3040 63517 ROMO Rocky Mountain NP 1995 ## 65 5 6820 107774 ROMO Rocky Mountain NP 1995 ## 66 6 9309 401034 ROMO Rocky Mountain NP 1995 ## 67 7 15637 643304 ROMO Rocky Mountain NP 1995 ## 68 8 35836 718453 ROMO Rocky Mountain NP 1995 ## 69 9 18281 404990 ROMO Rocky Mountain NP 1995 ## 70 10 11162 237056 ROMO Rocky Mountain NP 1995 ## 71 11 7043 69520 ROMO Rocky Mountain NP 1995 ## 72 12 6630 42515 ROMO Rocky Mountain NP 1995 ## 73 1 9408 50604 ROMO Rocky Mountain NP 1996 ## 74 2 8293 56462 ROMO Rocky Mountain NP 1996 ## 75 3 7368 69517 ROMO Rocky Mountain NP 1996 ## 76 4 7317 73462 ROMO Rocky Mountain NP 1996 ## 77 5 13786 177831 ROMO Rocky Mountain NP 1996 ## 78 6 24138 442730 ROMO Rocky Mountain NP 1996 ## 79 7 34807 669291 ROMO Rocky Mountain NP 1996 ## 80 8 36317 658613 ROMO Rocky Mountain NP 1996 ## 81 9 26050 405585 ROMO Rocky Mountain NP 1996 ## 82 10 12166 194353 ROMO Rocky Mountain NP 1996 ## 83 11 5904 61799 ROMO Rocky Mountain NP 1996 ## 84 12 6476 63508 ROMO Rocky Mountain NP 1996 ## 85 1 9041 60995 ROMO Rocky Mountain NP 1997 ## 86 2 5912 55496 ROMO Rocky Mountain NP 1997 ## 87 3 10246 82957 ROMO Rocky Mountain NP 1997 ## 88 4 4570 54619 ROMO Rocky Mountain NP 1997 ## 89 5 10020 182301 ROMO Rocky Mountain NP 1997 ## 90 6 16702 477849 ROMO Rocky Mountain NP 1997 ## 91 7 27457 672256 ROMO Rocky Mountain NP 1997 ## 92 8 32563 635015 ROMO Rocky Mountain NP 1997 ## 93 9 21495 408657 ROMO Rocky Mountain NP 1997 ## 94 10 10298 211588 ROMO Rocky Mountain NP 1997 ## 95 11 9683 65166 ROMO Rocky Mountain NP 1997 ## 96 12 10182 58455 ROMO Rocky Mountain NP 1997 ## 97 1 6650 64192 ROMO Rocky Mountain NP 1998 ## 98 2 7984 61194 ROMO Rocky Mountain NP 1998 ## 99 3 7169 70334 ROMO Rocky Mountain NP 1998 ## 100 4 5609 67735 ROMO Rocky Mountain NP 1998 ## 101 5 13935 198448 ROMO Rocky Mountain NP 1998 ## 102 6 18808 453744 ROMO Rocky Mountain NP 1998 ## 103 7 26503 683467 ROMO Rocky Mountain NP 1998 ## 104 8 35442 636460 ROMO Rocky Mountain NP 1998 ## 105 9 20275 445728 ROMO Rocky Mountain NP 1998 ## 106 10 13162 227638 ROMO Rocky Mountain NP 1998 ## 107 11 7517 69927 ROMO Rocky Mountain NP 1998 ## 108 12 11601 56555 ROMO Rocky Mountain NP 1998 ## 109 1 12044 60871 ROMO Rocky Mountain NP 1999 ## 110 2 11994 74798 ROMO Rocky Mountain NP 1999 ## 111 3 9522 87163 ROMO Rocky Mountain NP 1999 ## 112 4 2785 58644 ROMO Rocky Mountain NP 1999 ## 113 5 12580 187697 ROMO Rocky Mountain NP 1999 ## 114 6 13349 471035 ROMO Rocky Mountain NP 1999 ## 115 7 37925 739167 ROMO Rocky Mountain NP 1999 ## 116 8 22479 644694 ROMO Rocky Mountain NP 1999 ## 117 9 24894 466394 ROMO Rocky Mountain NP 1999 ## 118 10 10350 228197 ROMO Rocky Mountain NP 1999 ## 119 11 8600 94367 ROMO Rocky Mountain NP 1999 ## 120 12 13408 73296 ROMO Rocky Mountain NP 1999 ## 121 1 11398 67728 ROMO Rocky Mountain NP 2000 ## 122 2 11173 74328 ROMO Rocky Mountain NP 2000 ## 123 3 9588 83498 ROMO Rocky Mountain NP 2000 ## 124 4 14335 82564 ROMO Rocky Mountain NP 2000 ## 125 5 12178 211790 ROMO Rocky Mountain NP 2000 ## 126 6 24131 483925 ROMO Rocky Mountain NP 2000 ## 127 7 39183 735598 ROMO Rocky Mountain NP 2000 ## 128 8 27521 597407 ROMO Rocky Mountain NP 2000 ## 129 9 11987 448191 ROMO Rocky Mountain NP 2000 ## 130 10 11828 242240 ROMO Rocky Mountain NP 2000 ## 131 11 10640 85145 ROMO Rocky Mountain NP 2000 ## 132 12 10690 72978 ROMO Rocky Mountain NP 2000 ## 133 1 15599 62319 ROMO Rocky Mountain NP 2001 ## 134 2 13825 66820 ROMO Rocky Mountain NP 2001 ## 135 3 8816 73736 ROMO Rocky Mountain NP 2001 ## 136 4 7009 82007 ROMO Rocky Mountain NP 2001 ## 137 5 3640 198797 ROMO Rocky Mountain NP 2001 ## 138 6 21894 499970 ROMO Rocky Mountain NP 2001 ## 139 7 40281 749500 ROMO Rocky Mountain NP 2001 ## 140 8 27928 616789 ROMO Rocky Mountain NP 2001 ## 141 9 12586 463160 ROMO Rocky Mountain NP 2001 ## 142 10 6114 184616 ROMO Rocky Mountain NP 2001 ## 143 11 9013 81020 ROMO Rocky Mountain NP 2001 ## 144 12 11919 60951 ROMO Rocky Mountain NP 2001 ## 145 1 14591 64696 ROMO Rocky Mountain NP 2002 ## 146 2 9903 62365 ROMO Rocky Mountain NP 2002 ## 147 3 11023 78997 ROMO Rocky Mountain NP 2002 ## 148 4 6596 72485 ROMO Rocky Mountain NP 2002 ## 149 5 14216 228491 ROMO Rocky Mountain NP 2002 ## 150 6 16700 491045 ROMO Rocky Mountain NP 2002 ## 151 7 17503 653677 ROMO Rocky Mountain NP 2002 ## 152 8 18637 598693 ROMO Rocky Mountain NP 2002 ## 153 9 13349 428493 ROMO Rocky Mountain NP 2002 ## 154 10 10403 183445 ROMO Rocky Mountain NP 2002 ## 155 11 9214 57455 ROMO Rocky Mountain NP 2002 ## 156 12 7457 68633 ROMO Rocky Mountain NP 2002 ## 157 1 31849 61472 ROMO Rocky Mountain NP 2003 ## 158 2 6653 48224 ROMO Rocky Mountain NP 2003 ## 159 3 7614 63999 ROMO Rocky Mountain NP 2003 ## 160 4 3246 69226 ROMO Rocky Mountain NP 2003 ## 161 5 18581 198771 ROMO Rocky Mountain NP 2003 ## 162 6 17137 457861 ROMO Rocky Mountain NP 2003 ## 163 7 17374 678086 ROMO Rocky Mountain NP 2003 ## 164 8 24696 626473 ROMO Rocky Mountain NP 2003 ## 165 9 17626 465941 ROMO Rocky Mountain NP 2003 ## 166 10 15161 262699 ROMO Rocky Mountain NP 2003 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 218 rows ] # Everglades unit_visitation(park = &quot;EVER&quot;, start_year = &quot;1990&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 5223 122121 EVER Everglades NP 1990 ## 2 2 4518 131994 EVER Everglades NP 1990 ## 3 3 5120 132341 EVER Everglades NP 1990 ## 4 4 4225 111298 EVER Everglades NP 1990 ## 5 5 3314 46134 EVER Everglades NP 1990 ## 6 6 3100 46676 EVER Everglades NP 1990 ## 7 7 3177 49461 EVER Everglades NP 1990 ## 8 8 3153 54334 EVER Everglades NP 1990 ## 9 9 2572 44768 EVER Everglades NP 1990 ## 10 10 2607 48656 EVER Everglades NP 1990 ## 11 11 3170 75518 EVER Everglades NP 1990 ## 12 12 4005 94624 EVER Everglades NP 1990 ## 13 1 6350 138817 EVER Everglades NP 1991 ## 14 2 5255 149194 EVER Everglades NP 1991 ## 15 3 5762 150641 EVER Everglades NP 1991 ## 16 4 5067 110235 EVER Everglades NP 1991 ## 17 5 3762 94660 EVER Everglades NP 1991 ## 18 6 4143 68937 EVER Everglades NP 1991 ## 19 7 4121 61878 EVER Everglades NP 1991 ## 20 8 3860 71602 EVER Everglades NP 1991 ## 21 9 3599 81298 EVER Everglades NP 1991 ## 22 10 4058 86312 EVER Everglades NP 1991 ## 23 11 4586 126458 EVER Everglades NP 1991 ## 24 12 5066 151982 EVER Everglades NP 1991 ## 25 1 6623 142197 EVER Everglades NP 1992 ## 26 2 5745 163917 EVER Everglades NP 1992 ## 27 3 6518 158688 EVER Everglades NP 1992 ## 28 4 5067 126842 EVER Everglades NP 1992 ## 29 5 4095 100595 EVER Everglades NP 1992 ## 30 6 3896 59923 EVER Everglades NP 1992 ## 31 7 4011 70128 EVER Everglades NP 1992 ## 32 8 2615 59786 EVER Everglades NP 1992 ## 33 9 0 7610 EVER Everglades NP 1992 ## 34 10 0 23820 EVER Everglades NP 1992 ## 35 11 0 30644 EVER Everglades NP 1992 ## 36 12 101 81536 EVER Everglades NP 1992 ## 37 1 7386 106855 EVER Everglades NP 1993 ## 38 2 7199 119887 EVER Everglades NP 1993 ## 39 3 8078 121353 EVER Everglades NP 1993 ## 40 4 7478 96384 EVER Everglades NP 1993 ## 41 5 7178 76531 EVER Everglades NP 1993 ## 42 6 6816 62341 EVER Everglades NP 1993 ## 43 7 6752 66214 EVER Everglades NP 1993 ## 44 8 6317 61743 EVER Everglades NP 1993 ## 45 9 6773 51114 EVER Everglades NP 1993 ## 46 10 7322 58058 EVER Everglades NP 1993 ## 47 11 7899 67870 EVER Everglades NP 1993 ## 48 12 8739 85356 EVER Everglades NP 1993 ## 49 1 8879 103824 EVER Everglades NP 1994 ## 50 2 8846 114850 EVER Everglades NP 1994 ## 51 3 10365 121521 EVER Everglades NP 1994 ## 52 4 8670 95785 EVER Everglades NP 1994 ## 53 5 7622 65038 EVER Everglades NP 1994 ## 54 6 7403 44801 EVER Everglades NP 1994 ## 55 7 6521 51623 EVER Everglades NP 1994 ## 56 8 7712 47314 EVER Everglades NP 1994 ## 57 9 7107 47692 EVER Everglades NP 1994 ## 58 10 7203 58634 EVER Everglades NP 1994 ## 59 11 7250 64073 EVER Everglades NP 1994 ## 60 12 7911 71300 EVER Everglades NP 1994 ## 61 1 8696 93967 EVER Everglades NP 1995 ## 62 2 7994 110040 EVER Everglades NP 1995 ## 63 3 8585 110731 EVER Everglades NP 1995 ## 64 4 8285 91298 EVER Everglades NP 1995 ## 65 5 7917 67638 EVER Everglades NP 1995 ## 66 6 7716 46409 EVER Everglades NP 1995 ## 67 7 6429 52860 EVER Everglades NP 1995 ## 68 8 6687 50107 EVER Everglades NP 1995 ## 69 9 6666 50551 EVER Everglades NP 1995 ## 70 10 7665 51712 EVER Everglades NP 1995 ## 71 11 7400 57410 EVER Everglades NP 1995 ## 72 12 4857 37743 EVER Everglades NP 1995 ## 73 1 8039 65868 EVER Everglades NP 1996 ## 74 2 8927 124372 EVER Everglades NP 1996 ## 75 3 9716 110571 EVER Everglades NP 1996 ## 76 4 8720 97373 EVER Everglades NP 1996 ## 77 5 8943 71766 EVER Everglades NP 1996 ## 78 6 7661 46886 EVER Everglades NP 1996 ## 79 7 8262 51640 EVER Everglades NP 1996 ## 80 8 7530 55346 EVER Everglades NP 1996 ## 81 9 6584 51386 EVER Everglades NP 1996 ## 82 10 7493 52018 EVER Everglades NP 1996 ## 83 11 7065 73584 EVER Everglades NP 1996 ## 84 12 5718 89357 EVER Everglades NP 1996 ## 85 1 7490 102559 EVER Everglades NP 1997 ## 86 2 6375 128164 EVER Everglades NP 1997 ## 87 3 6690 132529 EVER Everglades NP 1997 ## 88 4 5478 88382 EVER Everglades NP 1997 ## 89 5 4893 72557 EVER Everglades NP 1997 ## 90 6 4670 49464 EVER Everglades NP 1997 ## 91 7 4173 55966 EVER Everglades NP 1997 ## 92 8 3581 59598 EVER Everglades NP 1997 ## 93 9 4067 45536 EVER Everglades NP 1997 ## 94 10 4719 79997 EVER Everglades NP 1997 ## 95 11 5025 85065 EVER Everglades NP 1997 ## 96 12 5259 89715 EVER Everglades NP 1997 ## 97 1 8039 118179 EVER Everglades NP 1998 ## 98 2 5753 128335 EVER Everglades NP 1998 ## 99 3 6168 130692 EVER Everglades NP 1998 ## 100 4 5289 105733 EVER Everglades NP 1998 ## 101 5 5022 94166 EVER Everglades NP 1998 ## 102 6 4523 66404 EVER Everglades NP 1998 ## 103 7 4298 76686 EVER Everglades NP 1998 ## 104 8 4202 82053 EVER Everglades NP 1998 ## 105 9 2922 56280 EVER Everglades NP 1998 ## 106 10 3785 72328 EVER Everglades NP 1998 ## 107 11 4449 92830 EVER Everglades NP 1998 ## 108 12 4812 94529 EVER Everglades NP 1998 ## 109 1 5801 118341 EVER Everglades NP 1999 ## 110 2 5750 139935 EVER Everglades NP 1999 ## 111 3 6240 145592 EVER Everglades NP 1999 ## 112 4 5627 118254 EVER Everglades NP 1999 ## 113 5 5582 82388 EVER Everglades NP 1999 ## 114 6 6807 64672 EVER Everglades NP 1999 ## 115 7 5999 68994 EVER Everglades NP 1999 ## 116 8 5664 68676 EVER Everglades NP 1999 ## 117 9 4674 58989 EVER Everglades NP 1999 ## 118 10 4736 57213 EVER Everglades NP 1999 ## 119 11 5163 73757 EVER Everglades NP 1999 ## 120 12 5418 77171 EVER Everglades NP 1999 ## 121 1 6138 109488 EVER Everglades NP 2000 ## 122 2 6368 131302 EVER Everglades NP 2000 ## 123 3 6225 127298 EVER Everglades NP 2000 ## 124 4 5523 100648 EVER Everglades NP 2000 ## 125 5 5789 81748 EVER Everglades NP 2000 ## 126 6 5040 44130 EVER Everglades NP 2000 ## 127 7 5085 41367 EVER Everglades NP 2000 ## 128 8 5459 56499 EVER Everglades NP 2000 ## 129 9 5256 58225 EVER Everglades NP 2000 ## 130 10 5523 73489 EVER Everglades NP 2000 ## 131 11 4290 83271 EVER Everglades NP 2000 ## 132 12 4542 87925 EVER Everglades NP 2000 ## 133 1 6188 130610 EVER Everglades NP 2001 ## 134 2 5058 159927 EVER Everglades NP 2001 ## 135 3 5828 142544 EVER Everglades NP 2001 ## 136 4 4935 105186 EVER Everglades NP 2001 ## 137 5 6057 78059 EVER Everglades NP 2001 ## 138 6 5270 63953 EVER Everglades NP 2001 ## 139 7 4062 61905 EVER Everglades NP 2001 ## 140 8 4310 52413 EVER Everglades NP 2001 ## 141 9 3782 40968 EVER Everglades NP 2001 ## 142 10 4206 54878 EVER Everglades NP 2001 ## 143 11 4494 70801 EVER Everglades NP 2001 ## 144 12 4349 88607 EVER Everglades NP 2001 ## 145 1 6188 116699 EVER Everglades NP 2002 ## 146 2 5361 123767 EVER Everglades NP 2002 ## 147 3 14637 138066 EVER Everglades NP 2002 ## 148 4 5640 90924 EVER Everglades NP 2002 ## 149 5 4635 59925 EVER Everglades NP 2002 ## 150 6 4497 46614 EVER Everglades NP 2002 ## 151 7 4122 52050 EVER Everglades NP 2002 ## 152 8 4433 51891 EVER Everglades NP 2002 ## 153 9 4131 46264 EVER Everglades NP 2002 ## 154 10 4626 82933 EVER Everglades NP 2002 ## 155 11 4883 76566 EVER Everglades NP 2002 ## 156 12 5820 83210 EVER Everglades NP 2002 ## 157 1 6998 116320 EVER Everglades NP 2003 ## 158 2 6260 131014 EVER Everglades NP 2003 ## 159 3 6905 135722 EVER Everglades NP 2003 ## 160 4 6171 94008 EVER Everglades NP 2003 ## 161 5 5058 68448 EVER Everglades NP 2003 ## 162 6 3578 58174 EVER Everglades NP 2003 ## 163 7 3362 64537 EVER Everglades NP 2003 ## 164 8 3188 65496 EVER Everglades NP 2003 ## 165 9 3096 55460 EVER Everglades NP 2003 ## 166 10 4289 70974 EVER Everglades NP 2003 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 218 rows ] # Theodore Roosevelt unit_visitation(park = &quot;THRO&quot;, start_year = &quot;1990&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 434 1044 THRO Theodore Roosevelt NP 1990 ## 2 2 434 1339 THRO Theodore Roosevelt NP 1990 ## 3 3 434 3636 THRO Theodore Roosevelt NP 1990 ## 4 4 623 16226 THRO Theodore Roosevelt NP 1990 ## 5 5 623 39255 THRO Theodore Roosevelt NP 1990 ## 6 6 623 88320 THRO Theodore Roosevelt NP 1990 ## 7 7 623 131586 THRO Theodore Roosevelt NP 1990 ## 8 8 623 118057 THRO Theodore Roosevelt NP 1990 ## 9 9 623 46139 THRO Theodore Roosevelt NP 1990 ## 10 10 623 9207 THRO Theodore Roosevelt NP 1990 ## 11 11 434 4326 THRO Theodore Roosevelt NP 1990 ## 12 12 434 1583 THRO Theodore Roosevelt NP 1990 ## 13 1 434 1387 THRO Theodore Roosevelt NP 1991 ## 14 2 434 1462 THRO Theodore Roosevelt NP 1991 ## 15 3 434 4332 THRO Theodore Roosevelt NP 1991 ## 16 4 623 13501 THRO Theodore Roosevelt NP 1991 ## 17 5 623 34713 THRO Theodore Roosevelt NP 1991 ## 18 6 623 83363 THRO Theodore Roosevelt NP 1991 ## 19 7 623 127724 THRO Theodore Roosevelt NP 1991 ## 20 8 623 129336 THRO Theodore Roosevelt NP 1991 ## 21 9 623 45886 THRO Theodore Roosevelt NP 1991 ## 22 10 623 20626 THRO Theodore Roosevelt NP 1991 ## 23 11 434 5220 THRO Theodore Roosevelt NP 1991 ## 24 12 434 1376 THRO Theodore Roosevelt NP 1991 ## 25 1 417 909 THRO Theodore Roosevelt NP 1992 ## 26 2 417 1026 THRO Theodore Roosevelt NP 1992 ## 27 3 472 3663 THRO Theodore Roosevelt NP 1992 ## 28 4 622 15052 THRO Theodore Roosevelt NP 1992 ## 29 5 623 35418 THRO Theodore Roosevelt NP 1992 ## 30 6 623 82069 THRO Theodore Roosevelt NP 1992 ## 31 7 622 134524 THRO Theodore Roosevelt NP 1992 ## 32 8 621 130518 THRO Theodore Roosevelt NP 1992 ## 33 9 624 47515 THRO Theodore Roosevelt NP 1992 ## 34 10 482 20176 THRO Theodore Roosevelt NP 1992 ## 35 11 472 4435 THRO Theodore Roosevelt NP 1992 ## 36 12 417 632 THRO Theodore Roosevelt NP 1992 ## 37 1 417 748 THRO Theodore Roosevelt NP 1993 ## 38 2 417 814 THRO Theodore Roosevelt NP 1993 ## 39 3 472 2212 THRO Theodore Roosevelt NP 1993 ## 40 4 622 14042 THRO Theodore Roosevelt NP 1993 ## 41 5 623 37693 THRO Theodore Roosevelt NP 1993 ## 42 6 623 80340 THRO Theodore Roosevelt NP 1993 ## 43 7 622 125177 THRO Theodore Roosevelt NP 1993 ## 44 8 621 136519 THRO Theodore Roosevelt NP 1993 ## 45 9 624 49363 THRO Theodore Roosevelt NP 1993 ## 46 10 482 22456 THRO Theodore Roosevelt NP 1993 ## 47 11 472 4789 THRO Theodore Roosevelt NP 1993 ## 48 12 417 1007 THRO Theodore Roosevelt NP 1993 ## 49 1 417 894 THRO Theodore Roosevelt NP 1994 ## 50 2 417 933 THRO Theodore Roosevelt NP 1994 ## 51 3 472 2884 THRO Theodore Roosevelt NP 1994 ## 52 4 622 16714 THRO Theodore Roosevelt NP 1994 ## 53 5 623 41432 THRO Theodore Roosevelt NP 1994 ## 54 6 623 85653 THRO Theodore Roosevelt NP 1994 ## 55 7 622 141375 THRO Theodore Roosevelt NP 1994 ## 56 8 621 130386 THRO Theodore Roosevelt NP 1994 ## 57 9 624 56071 THRO Theodore Roosevelt NP 1994 ## 58 10 482 22176 THRO Theodore Roosevelt NP 1994 ## 59 11 472 5667 THRO Theodore Roosevelt NP 1994 ## 60 12 417 1164 THRO Theodore Roosevelt NP 1994 ## 61 1 417 1058 THRO Theodore Roosevelt NP 1995 ## 62 2 417 1688 THRO Theodore Roosevelt NP 1995 ## 63 3 472 2020 THRO Theodore Roosevelt NP 1995 ## 64 4 622 12437 THRO Theodore Roosevelt NP 1995 ## 65 5 623 37140 THRO Theodore Roosevelt NP 1995 ## 66 6 623 62012 THRO Theodore Roosevelt NP 1995 ## 67 7 622 126108 THRO Theodore Roosevelt NP 1995 ## 68 8 621 125332 THRO Theodore Roosevelt NP 1995 ## 69 9 624 59467 THRO Theodore Roosevelt NP 1995 ## 70 10 482 25065 THRO Theodore Roosevelt NP 1995 ## 71 11 472 7819 THRO Theodore Roosevelt NP 1995 ## 72 12 417 553 THRO Theodore Roosevelt NP 1995 ## 73 1 417 712 THRO Theodore Roosevelt NP 1996 ## 74 2 417 1752 THRO Theodore Roosevelt NP 1996 ## 75 3 472 2822 THRO Theodore Roosevelt NP 1996 ## 76 4 622 16940 THRO Theodore Roosevelt NP 1996 ## 77 5 623 43424 THRO Theodore Roosevelt NP 1996 ## 78 6 623 58352 THRO Theodore Roosevelt NP 1996 ## 79 7 622 99750 THRO Theodore Roosevelt NP 1996 ## 80 8 621 122566 THRO Theodore Roosevelt NP 1996 ## 81 9 624 53108 THRO Theodore Roosevelt NP 1996 ## 82 10 482 27333 THRO Theodore Roosevelt NP 1996 ## 83 11 472 8528 THRO Theodore Roosevelt NP 1996 ## 84 12 417 794 THRO Theodore Roosevelt NP 1996 ## 85 1 417 814 THRO Theodore Roosevelt NP 1997 ## 86 2 417 1676 THRO Theodore Roosevelt NP 1997 ## 87 3 472 2519 THRO Theodore Roosevelt NP 1997 ## 88 4 622 10127 THRO Theodore Roosevelt NP 1997 ## 89 5 623 29261 THRO Theodore Roosevelt NP 1997 ## 90 6 623 61553 THRO Theodore Roosevelt NP 1997 ## 91 7 622 93687 THRO Theodore Roosevelt NP 1997 ## 92 8 621 108501 THRO Theodore Roosevelt NP 1997 ## 93 9 624 52435 THRO Theodore Roosevelt NP 1997 ## 94 10 482 24610 THRO Theodore Roosevelt NP 1997 ## 95 11 472 5512 THRO Theodore Roosevelt NP 1997 ## 96 12 417 2570 THRO Theodore Roosevelt NP 1997 ## 97 1 417 3211 THRO Theodore Roosevelt NP 1998 ## 98 2 417 3222 THRO Theodore Roosevelt NP 1998 ## 99 3 472 2225 THRO Theodore Roosevelt NP 1998 ## 100 4 622 17438 THRO Theodore Roosevelt NP 1998 ## 101 5 623 40643 THRO Theodore Roosevelt NP 1998 ## 102 6 623 76842 THRO Theodore Roosevelt NP 1998 ## 103 7 622 106388 THRO Theodore Roosevelt NP 1998 ## 104 8 621 111675 THRO Theodore Roosevelt NP 1998 ## 105 9 624 54891 THRO Theodore Roosevelt NP 1998 ## 106 10 482 23752 THRO Theodore Roosevelt NP 1998 ## 107 11 472 6885 THRO Theodore Roosevelt NP 1998 ## 108 12 417 1114 THRO Theodore Roosevelt NP 1998 ## 109 1 472 1167 THRO Theodore Roosevelt NP 1999 ## 110 2 472 1464 THRO Theodore Roosevelt NP 1999 ## 111 3 472 2921 THRO Theodore Roosevelt NP 1999 ## 112 4 622 20194 THRO Theodore Roosevelt NP 1999 ## 113 5 623 30590 THRO Theodore Roosevelt NP 1999 ## 114 6 623 71375 THRO Theodore Roosevelt NP 1999 ## 115 7 622 102566 THRO Theodore Roosevelt NP 1999 ## 116 8 621 110667 THRO Theodore Roosevelt NP 1999 ## 117 9 624 51527 THRO Theodore Roosevelt NP 1999 ## 118 10 483 27695 THRO Theodore Roosevelt NP 1999 ## 119 11 472 9617 THRO Theodore Roosevelt NP 1999 ## 120 12 472 1528 THRO Theodore Roosevelt NP 1999 ## 121 1 472 1039 THRO Theodore Roosevelt NP 2000 ## 122 2 472 1037 THRO Theodore Roosevelt NP 2000 ## 123 3 472 4073 THRO Theodore Roosevelt NP 2000 ## 124 4 622 16264 THRO Theodore Roosevelt NP 2000 ## 125 5 623 41394 THRO Theodore Roosevelt NP 2000 ## 126 6 623 64396 THRO Theodore Roosevelt NP 2000 ## 127 7 622 116569 THRO Theodore Roosevelt NP 2000 ## 128 8 621 101706 THRO Theodore Roosevelt NP 2000 ## 129 9 624 55362 THRO Theodore Roosevelt NP 2000 ## 130 10 483 22097 THRO Theodore Roosevelt NP 2000 ## 131 11 472 7138 THRO Theodore Roosevelt NP 2000 ## 132 12 472 738 THRO Theodore Roosevelt NP 2000 ## 133 1 472 625 THRO Theodore Roosevelt NP 2001 ## 134 2 472 583 THRO Theodore Roosevelt NP 2001 ## 135 3 472 1706 THRO Theodore Roosevelt NP 2001 ## 136 4 622 15367 THRO Theodore Roosevelt NP 2001 ## 137 5 623 34347 THRO Theodore Roosevelt NP 2001 ## 138 6 623 70200 THRO Theodore Roosevelt NP 2001 ## 139 7 622 117441 THRO Theodore Roosevelt NP 2001 ## 140 8 621 114881 THRO Theodore Roosevelt NP 2001 ## 141 9 624 56866 THRO Theodore Roosevelt NP 2001 ## 142 10 483 26244 THRO Theodore Roosevelt NP 2001 ## 143 11 472 7556 THRO Theodore Roosevelt NP 2001 ## 144 12 472 793 THRO Theodore Roosevelt NP 2001 ## 145 1 472 672 THRO Theodore Roosevelt NP 2002 ## 146 2 472 646 THRO Theodore Roosevelt NP 2002 ## 147 3 472 1745 THRO Theodore Roosevelt NP 2002 ## 148 4 622 15680 THRO Theodore Roosevelt NP 2002 ## 149 5 623 35473 THRO Theodore Roosevelt NP 2002 ## 150 6 623 76734 THRO Theodore Roosevelt NP 2002 ## 151 7 622 120464 THRO Theodore Roosevelt NP 2002 ## 152 8 621 119915 THRO Theodore Roosevelt NP 2002 ## 153 9 624 65289 THRO Theodore Roosevelt NP 2002 ## 154 10 483 25478 THRO Theodore Roosevelt NP 2002 ## 155 11 472 8484 THRO Theodore Roosevelt NP 2002 ## 156 12 472 971 THRO Theodore Roosevelt NP 2002 ## 157 1 472 1334 THRO Theodore Roosevelt NP 2003 ## 158 2 472 1682 THRO Theodore Roosevelt NP 2003 ## 159 3 472 2425 THRO Theodore Roosevelt NP 2003 ## 160 4 622 18106 THRO Theodore Roosevelt NP 2003 ## 161 5 623 37445 THRO Theodore Roosevelt NP 2003 ## 162 6 623 78469 THRO Theodore Roosevelt NP 2003 ## 163 7 622 114219 THRO Theodore Roosevelt NP 2003 ## 164 8 621 116140 THRO Theodore Roosevelt NP 2003 ## 165 9 624 72031 THRO Theodore Roosevelt NP 2003 ## 166 10 483 36908 THRO Theodore Roosevelt NP 2003 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 218 rows ] 1.3 Function Defaults Look at the code that you just wrote; writing out all of those unchanging date arguments still feels repetitive, right? When developing functions, there is an option for setting default values for arguments so that you don‚Äôt necessarily have to write all of them out every time you run it in the future. But, the option still exists within the function to make changes when necessary. For example, let‚Äôs tweak our parkwide_visitaion() function to have the default year be 2021: parkwide_visitation &lt;- function(year = &quot;2021&quot;) { raw_data &lt;- httr::GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) # convert content to text extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) # parse text from JSON to data frame final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } parkwide_visitation() ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 11632614 11978413 NA NA 2021 ## 2 2 11082899 11692967 NA NA 2021 ## 3 3 12981524 18370611 NA NA 2021 ## 4 4 12857567 22155245 NA NA 2021 ## 5 5 13250575 27963739 NA NA 2021 ## 6 6 13789961 36122392 NA NA 2021 ## 7 7 14734920 41329530 NA NA 2021 ## 8 8 14280304 35380986 NA NA 2021 ## 9 9 13382939 30204635 NA NA 2021 ## 10 10 13882165 26961779 NA NA 2021 ## 11 11 13192146 18903397 NA NA 2021 ## 12 12 13007065 16051712 NA NA 2021 Because the default year is 2021, you don‚Äôt have to write it out explicitly in the function (so long as that‚Äôs the year you‚Äôre interested in). But, you still have the option of changing the year to something else: parkwide_visitation(year = &quot;1992&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 6209285 10940618 NA NA 1992 ## 2 2 6010027 11931340 NA NA 1992 ## 3 3 6756902 15369139 NA NA 1992 ## 4 4 7255782 21458739 NA NA 1992 ## 5 5 7690763 26648530 NA NA 1992 ## 6 6 7593227 33284625 NA NA 1992 ## 7 7 8438755 41099305 NA NA 1992 ## 8 8 8056823 38625804 NA NA 1992 ## 9 9 7329755 26438266 NA NA 1992 ## 10 10 7105574 23616057 NA NA 1992 ## 11 11 6507805 14338165 NA NA 1992 ## 12 12 6702698 10943961 NA NA 1992 1.3.0.1 Exercise #5 Default our unit_visitation() function‚Äôs arguments related to the starting and ending months to January and December, respectively. This way, we are automatically pulling in data for entire years. Rerun the function for ROMO, EVER, and THRO for the 1980-2021 time period to make sure it works properly. #specified months in the unit_visitation function above # Rocky Mtn unit_visitation(park = &quot;ROMO&quot;, start_year = &quot;1980&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 28 42902 ROMO Rocky Mountain NP 1980 ## 2 2 44 59403 ROMO Rocky Mountain NP 1980 ## 3 3 24 58790 ROMO Rocky Mountain NP 1980 ## 4 4 142 64299 ROMO Rocky Mountain NP 1980 ## 5 5 98 93210 ROMO Rocky Mountain NP 1980 ## 6 6 2384 410449 ROMO Rocky Mountain NP 1980 ## 7 7 3748 573465 ROMO Rocky Mountain NP 1980 ## 8 8 3634 609383 ROMO Rocky Mountain NP 1980 ## 9 9 1472 389771 ROMO Rocky Mountain NP 1980 ## 10 10 532 219495 ROMO Rocky Mountain NP 1980 ## 11 11 100 51344 ROMO Rocky Mountain NP 1980 ## 12 12 54 69426 ROMO Rocky Mountain NP 1980 ## 13 1 60 52645 ROMO Rocky Mountain NP 1981 ## 14 2 0 47256 ROMO Rocky Mountain NP 1981 ## 15 3 0 63637 ROMO Rocky Mountain NP 1981 ## 16 4 0 78529 ROMO Rocky Mountain NP 1981 ## 17 5 0 130744 ROMO Rocky Mountain NP 1981 ## 18 6 642 439671 ROMO Rocky Mountain NP 1981 ## 19 7 2130 674786 ROMO Rocky Mountain NP 1981 ## 20 8 1908 677202 ROMO Rocky Mountain NP 1981 ## 21 9 656 430738 ROMO Rocky Mountain NP 1981 ## 22 10 170 202193 ROMO Rocky Mountain NP 1981 ## 23 11 54 51650 ROMO Rocky Mountain NP 1981 ## 24 12 218 62191 ROMO Rocky Mountain NP 1981 ## 25 1 316 65547 ROMO Rocky Mountain NP 1982 ## 26 2 48 59558 ROMO Rocky Mountain NP 1982 ## 27 3 54 64554 ROMO Rocky Mountain NP 1982 ## 28 4 174 74092 ROMO Rocky Mountain NP 1982 ## 29 5 298 106375 ROMO Rocky Mountain NP 1982 ## 30 6 2796 366311 ROMO Rocky Mountain NP 1982 ## 31 7 3274 573923 ROMO Rocky Mountain NP 1982 ## 32 8 4406 613132 ROMO Rocky Mountain NP 1982 ## 33 9 2428 360870 ROMO Rocky Mountain NP 1982 ## 34 10 736 177760 ROMO Rocky Mountain NP 1982 ## 35 11 58 51377 ROMO Rocky Mountain NP 1982 ## 36 12 198 50617 ROMO Rocky Mountain NP 1982 ## 37 1 3778 67598 ROMO Rocky Mountain NP 1983 ## 38 2 2644 70480 ROMO Rocky Mountain NP 1983 ## 39 3 2560 60310 ROMO Rocky Mountain NP 1983 ## 40 4 4563 79542 ROMO Rocky Mountain NP 1983 ## 41 5 4257 91340 ROMO Rocky Mountain NP 1983 ## 42 6 9011 322393 ROMO Rocky Mountain NP 1983 ## 43 7 15891 552473 ROMO Rocky Mountain NP 1983 ## 44 8 23219 625132 ROMO Rocky Mountain NP 1983 ## 45 9 14202 432745 ROMO Rocky Mountain NP 1983 ## 46 10 10841 193914 ROMO Rocky Mountain NP 1983 ## 47 11 6370 76969 ROMO Rocky Mountain NP 1983 ## 48 12 4744 26110 ROMO Rocky Mountain NP 1983 ## 49 1 5253 51124 ROMO Rocky Mountain NP 1984 ## 50 2 4257 49126 ROMO Rocky Mountain NP 1984 ## 51 3 3165 46210 ROMO Rocky Mountain NP 1984 ## 52 4 3174 46736 ROMO Rocky Mountain NP 1984 ## 53 5 4212 75806 ROMO Rocky Mountain NP 1984 ## 54 6 14464 303393 ROMO Rocky Mountain NP 1984 ## 55 7 27018 514848 ROMO Rocky Mountain NP 1984 ## 56 8 30006 605465 ROMO Rocky Mountain NP 1984 ## 57 9 63411 355768 ROMO Rocky Mountain NP 1984 ## 58 10 75817 93927 ROMO Rocky Mountain NP 1984 ## 59 11 2951 52850 ROMO Rocky Mountain NP 1984 ## 60 12 458 36195 ROMO Rocky Mountain NP 1984 ## 61 1 5832 68416 ROMO Rocky Mountain NP 1985 ## 62 2 3676 47012 ROMO Rocky Mountain NP 1985 ## 63 3 865 55707 ROMO Rocky Mountain NP 1985 ## 64 4 1513 58854 ROMO Rocky Mountain NP 1985 ## 65 5 1949 117475 ROMO Rocky Mountain NP 1985 ## 66 6 12852 327505 ROMO Rocky Mountain NP 1985 ## 67 7 27504 501624 ROMO Rocky Mountain NP 1985 ## 68 8 26757 585115 ROMO Rocky Mountain NP 1985 ## 69 9 12828 304574 ROMO Rocky Mountain NP 1985 ## 70 10 4048 87250 ROMO Rocky Mountain NP 1985 ## 71 11 3285 52986 ROMO Rocky Mountain NP 1985 ## 72 12 4515 42336 ROMO Rocky Mountain NP 1985 ## 73 1 7281 74949 ROMO Rocky Mountain NP 1986 ## 74 2 4342 38588 ROMO Rocky Mountain NP 1986 ## 75 3 4653 58001 ROMO Rocky Mountain NP 1986 ## 76 4 2424 67259 ROMO Rocky Mountain NP 1986 ## 77 5 3197 111710 ROMO Rocky Mountain NP 1986 ## 78 6 9976 303208 ROMO Rocky Mountain NP 1986 ## 79 7 24774 547751 ROMO Rocky Mountain NP 1986 ## 80 8 27016 643670 ROMO Rocky Mountain NP 1986 ## 81 9 13184 338915 ROMO Rocky Mountain NP 1986 ## 82 10 6925 126243 ROMO Rocky Mountain NP 1986 ## 83 11 5671 45674 ROMO Rocky Mountain NP 1986 ## 84 12 5445 52266 ROMO Rocky Mountain NP 1986 ## 85 1 2917 77184 ROMO Rocky Mountain NP 1987 ## 86 2 12844 52922 ROMO Rocky Mountain NP 1987 ## 87 3 2684 54316 ROMO Rocky Mountain NP 1987 ## 88 4 3380 59363 ROMO Rocky Mountain NP 1987 ## 89 5 6704 136049 ROMO Rocky Mountain NP 1987 ## 90 6 16155 365757 ROMO Rocky Mountain NP 1987 ## 91 7 25768 546231 ROMO Rocky Mountain NP 1987 ## 92 8 26661 621584 ROMO Rocky Mountain NP 1987 ## 93 9 16015 359746 ROMO Rocky Mountain NP 1987 ## 94 10 7265 171484 ROMO Rocky Mountain NP 1987 ## 95 11 6969 50425 ROMO Rocky Mountain NP 1987 ## 96 12 5803 36803 ROMO Rocky Mountain NP 1987 ## 97 1 8191 58824 ROMO Rocky Mountain NP 1988 ## 98 2 8718 52367 ROMO Rocky Mountain NP 1988 ## 99 3 2542 56677 ROMO Rocky Mountain NP 1988 ## 100 4 3584 57933 ROMO Rocky Mountain NP 1988 ## 101 5 2016 91676 ROMO Rocky Mountain NP 1988 ## 102 6 20746 399197 ROMO Rocky Mountain NP 1988 ## 103 7 24083 568028 ROMO Rocky Mountain NP 1988 ## 104 8 30133 617184 ROMO Rocky Mountain NP 1988 ## 105 9 18607 371318 ROMO Rocky Mountain NP 1988 ## 106 10 9106 178657 ROMO Rocky Mountain NP 1988 ## 107 11 7029 55402 ROMO Rocky Mountain NP 1988 ## 108 12 7950 36948 ROMO Rocky Mountain NP 1988 ## 109 1 9784 60075 ROMO Rocky Mountain NP 1989 ## 110 2 9001 52050 ROMO Rocky Mountain NP 1989 ## 111 3 5582 60381 ROMO Rocky Mountain NP 1989 ## 112 4 2510 52044 ROMO Rocky Mountain NP 1989 ## 113 5 7934 92436 ROMO Rocky Mountain NP 1989 ## 114 6 18451 370174 ROMO Rocky Mountain NP 1989 ## 115 7 24557 590130 ROMO Rocky Mountain NP 1989 ## 116 8 21097 600617 ROMO Rocky Mountain NP 1989 ## 117 9 14738 358910 ROMO Rocky Mountain NP 1989 ## 118 10 9143 183199 ROMO Rocky Mountain NP 1989 ## 119 11 5102 54061 ROMO Rocky Mountain NP 1989 ## 120 12 5848 28838 ROMO Rocky Mountain NP 1989 ## 121 1 10956 53565 ROMO Rocky Mountain NP 1990 ## 122 2 9343 49896 ROMO Rocky Mountain NP 1990 ## 123 3 7247 65280 ROMO Rocky Mountain NP 1990 ## 124 4 4681 60274 ROMO Rocky Mountain NP 1990 ## 125 5 11465 108881 ROMO Rocky Mountain NP 1990 ## 126 6 17173 435279 ROMO Rocky Mountain NP 1990 ## 127 7 28031 560806 ROMO Rocky Mountain NP 1990 ## 128 8 30676 646018 ROMO Rocky Mountain NP 1990 ## 129 9 13162 392873 ROMO Rocky Mountain NP 1990 ## 130 10 9608 164130 ROMO Rocky Mountain NP 1990 ## 131 11 5749 73064 ROMO Rocky Mountain NP 1990 ## 132 12 5845 37257 ROMO Rocky Mountain NP 1990 ## 133 1 8071 50910 ROMO Rocky Mountain NP 1991 ## 134 2 6467 57547 ROMO Rocky Mountain NP 1991 ## 135 3 8492 56241 ROMO Rocky Mountain NP 1991 ## 136 4 6231 67986 ROMO Rocky Mountain NP 1991 ## 137 5 13124 118351 ROMO Rocky Mountain NP 1991 ## 138 6 18645 434810 ROMO Rocky Mountain NP 1991 ## 139 7 28663 614118 ROMO Rocky Mountain NP 1991 ## 140 8 25541 642734 ROMO Rocky Mountain NP 1991 ## 141 9 19042 385524 ROMO Rocky Mountain NP 1991 ## 142 10 9185 237608 ROMO Rocky Mountain NP 1991 ## 143 11 2815 43136 ROMO Rocky Mountain NP 1991 ## 144 12 5754 42816 ROMO Rocky Mountain NP 1991 ## 145 1 9398 60038 ROMO Rocky Mountain NP 1992 ## 146 2 9674 48476 ROMO Rocky Mountain NP 1992 ## 147 3 6444 58478 ROMO Rocky Mountain NP 1992 ## 148 4 4797 80217 ROMO Rocky Mountain NP 1992 ## 149 5 11308 160788 ROMO Rocky Mountain NP 1992 ## 150 6 15198 408630 ROMO Rocky Mountain NP 1992 ## 151 7 28690 606764 ROMO Rocky Mountain NP 1992 ## 152 8 24688 623634 ROMO Rocky Mountain NP 1992 ## 153 9 20790 440843 ROMO Rocky Mountain NP 1992 ## 154 10 12764 218570 ROMO Rocky Mountain NP 1992 ## 155 11 4346 47490 ROMO Rocky Mountain NP 1992 ## 156 12 5778 34940 ROMO Rocky Mountain NP 1992 ## 157 1 9015 53780 ROMO Rocky Mountain NP 1993 ## 158 2 8490 39962 ROMO Rocky Mountain NP 1993 ## 159 3 7375 52511 ROMO Rocky Mountain NP 1993 ## 160 4 5256 65790 ROMO Rocky Mountain NP 1993 ## 161 5 7498 120708 ROMO Rocky Mountain NP 1993 ## 162 6 20483 424670 ROMO Rocky Mountain NP 1993 ## 163 7 31510 623451 ROMO Rocky Mountain NP 1993 ## 164 8 36845 654327 ROMO Rocky Mountain NP 1993 ## 165 9 22219 423570 ROMO Rocky Mountain NP 1993 ## 166 10 11741 230972 ROMO Rocky Mountain NP 1993 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 338 rows ] # Everglades unit_visitation(park = &quot;EVER&quot;, start_year = &quot;1980&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 5670 92517 EVER Everglades NP 1980 ## 2 2 4697 96585 EVER Everglades NP 1980 ## 3 3 6160 101797 EVER Everglades NP 1980 ## 4 4 5281 80500 EVER Everglades NP 1980 ## 5 5 4851 53627 EVER Everglades NP 1980 ## 6 6 4151 37721 EVER Everglades NP 1980 ## 7 7 5037 45665 EVER Everglades NP 1980 ## 8 8 4431 47624 EVER Everglades NP 1980 ## 9 9 4274 34889 EVER Everglades NP 1980 ## 10 10 4368 47387 EVER Everglades NP 1980 ## 11 11 4060 37498 EVER Everglades NP 1980 ## 12 12 5127 68434 EVER Everglades NP 1980 ## 13 1 4333 73845 EVER Everglades NP 1981 ## 14 2 5467 75996 EVER Everglades NP 1981 ## 15 3 7647 93947 EVER Everglades NP 1981 ## 16 4 5208 63246 EVER Everglades NP 1981 ## 17 5 4585 37226 EVER Everglades NP 1981 ## 18 6 4088 23647 EVER Everglades NP 1981 ## 19 7 3748 25168 EVER Everglades NP 1981 ## 20 8 4732 28262 EVER Everglades NP 1981 ## 21 9 4287 21493 EVER Everglades NP 1981 ## 22 10 4533 29005 EVER Everglades NP 1981 ## 23 11 3983 32084 EVER Everglades NP 1981 ## 24 12 5611 60802 EVER Everglades NP 1981 ## 25 1 6622 69165 EVER Everglades NP 1982 ## 26 2 5516 81665 EVER Everglades NP 1982 ## 27 3 7969 81796 EVER Everglades NP 1982 ## 28 4 6968 56259 EVER Everglades NP 1982 ## 29 5 5739 31248 EVER Everglades NP 1982 ## 30 6 5162 18985 EVER Everglades NP 1982 ## 31 7 5103 23111 EVER Everglades NP 1982 ## 32 8 5586 29049 EVER Everglades NP 1982 ## 33 9 4921 25022 EVER Everglades NP 1982 ## 34 10 5358 33944 EVER Everglades NP 1982 ## 35 11 5327 34009 EVER Everglades NP 1982 ## 36 12 5904 65915 EVER Everglades NP 1982 ## 37 1 250 72105 EVER Everglades NP 1983 ## 38 2 220 79968 EVER Everglades NP 1983 ## 39 3 297 84433 EVER Everglades NP 1983 ## 40 4 228 59209 EVER Everglades NP 1983 ## 41 5 215 44570 EVER Everglades NP 1983 ## 42 6 126 27576 EVER Everglades NP 1983 ## 43 7 84 30348 EVER Everglades NP 1983 ## 44 8 114 26189 EVER Everglades NP 1983 ## 45 9 132 23056 EVER Everglades NP 1983 ## 46 10 284 28780 EVER Everglades NP 1983 ## 47 11 281 40683 EVER Everglades NP 1983 ## 48 12 274 60522 EVER Everglades NP 1983 ## 49 1 318 78179 EVER Everglades NP 1984 ## 50 2 412 92958 EVER Everglades NP 1984 ## 51 3 385 97997 EVER Everglades NP 1984 ## 52 4 280 71594 EVER Everglades NP 1984 ## 53 5 225 36831 EVER Everglades NP 1984 ## 54 6 248 22900 EVER Everglades NP 1984 ## 55 7 177 26928 EVER Everglades NP 1984 ## 56 8 178 28283 EVER Everglades NP 1984 ## 57 9 156 26494 EVER Everglades NP 1984 ## 58 10 292 33688 EVER Everglades NP 1984 ## 59 11 302 47202 EVER Everglades NP 1984 ## 60 12 260 65604 EVER Everglades NP 1984 ## 61 1 251 87719 EVER Everglades NP 1985 ## 62 2 304 110139 EVER Everglades NP 1985 ## 63 3 339 109046 EVER Everglades NP 1985 ## 64 4 199 76131 EVER Everglades NP 1985 ## 65 5 220 41505 EVER Everglades NP 1985 ## 66 6 238 34807 EVER Everglades NP 1985 ## 67 7 232 26379 EVER Everglades NP 1985 ## 68 8 140 28732 EVER Everglades NP 1985 ## 69 9 221 24205 EVER Everglades NP 1985 ## 70 10 343 30487 EVER Everglades NP 1985 ## 71 11 327 52152 EVER Everglades NP 1985 ## 72 12 226 76344 EVER Everglades NP 1985 ## 73 1 1067 93007 EVER Everglades NP 1986 ## 74 2 2126 112967 EVER Everglades NP 1986 ## 75 3 2532 120713 EVER Everglades NP 1986 ## 76 4 2164 98993 EVER Everglades NP 1986 ## 77 5 1924 51024 EVER Everglades NP 1986 ## 78 6 1630 25271 EVER Everglades NP 1986 ## 79 7 1671 25510 EVER Everglades NP 1986 ## 80 8 1814 31136 EVER Everglades NP 1986 ## 81 9 1809 25685 EVER Everglades NP 1986 ## 82 10 2078 32164 EVER Everglades NP 1986 ## 83 11 2014 52037 EVER Everglades NP 1986 ## 84 12 2382 70565 EVER Everglades NP 1986 ## 85 1 2506 100672 EVER Everglades NP 1987 ## 86 2 2544 107662 EVER Everglades NP 1987 ## 87 3 2669 114552 EVER Everglades NP 1987 ## 88 4 2300 84997 EVER Everglades NP 1987 ## 89 5 2371 62830 EVER Everglades NP 1987 ## 90 6 2034 38834 EVER Everglades NP 1987 ## 91 7 1985 34629 EVER Everglades NP 1987 ## 92 8 2116 37656 EVER Everglades NP 1987 ## 93 9 1894 27660 EVER Everglades NP 1987 ## 94 10 1994 34663 EVER Everglades NP 1987 ## 95 11 2176 56210 EVER Everglades NP 1987 ## 96 12 3672 87128 EVER Everglades NP 1987 ## 97 1 4021 133552 EVER Everglades NP 1988 ## 98 2 3905 164724 EVER Everglades NP 1988 ## 99 3 4458 155497 EVER Everglades NP 1988 ## 100 4 3831 120486 EVER Everglades NP 1988 ## 101 5 3148 61844 EVER Everglades NP 1988 ## 102 6 2944 46557 EVER Everglades NP 1988 ## 103 7 3035 48432 EVER Everglades NP 1988 ## 104 8 3557 53154 EVER Everglades NP 1988 ## 105 9 3480 41846 EVER Everglades NP 1988 ## 106 10 3841 49613 EVER Everglades NP 1988 ## 107 11 4163 60979 EVER Everglades NP 1988 ## 108 12 4801 89504 EVER Everglades NP 1988 ## 109 1 4935 127647 EVER Everglades NP 1989 ## 110 2 4682 137603 EVER Everglades NP 1989 ## 111 3 5607 133571 EVER Everglades NP 1989 ## 112 4 5997 84281 EVER Everglades NP 1989 ## 113 5 6036 39312 EVER Everglades NP 1989 ## 114 6 3974 44556 EVER Everglades NP 1989 ## 115 7 3526 49266 EVER Everglades NP 1989 ## 116 8 3778 51713 EVER Everglades NP 1989 ## 117 9 3339 38515 EVER Everglades NP 1989 ## 118 10 3915 51415 EVER Everglades NP 1989 ## 119 11 4332 69340 EVER Everglades NP 1989 ## 120 12 4399 86153 EVER Everglades NP 1989 ## 121 1 5223 122121 EVER Everglades NP 1990 ## 122 2 4518 131994 EVER Everglades NP 1990 ## 123 3 5120 132341 EVER Everglades NP 1990 ## 124 4 4225 111298 EVER Everglades NP 1990 ## 125 5 3314 46134 EVER Everglades NP 1990 ## 126 6 3100 46676 EVER Everglades NP 1990 ## 127 7 3177 49461 EVER Everglades NP 1990 ## 128 8 3153 54334 EVER Everglades NP 1990 ## 129 9 2572 44768 EVER Everglades NP 1990 ## 130 10 2607 48656 EVER Everglades NP 1990 ## 131 11 3170 75518 EVER Everglades NP 1990 ## 132 12 4005 94624 EVER Everglades NP 1990 ## 133 1 6350 138817 EVER Everglades NP 1991 ## 134 2 5255 149194 EVER Everglades NP 1991 ## 135 3 5762 150641 EVER Everglades NP 1991 ## 136 4 5067 110235 EVER Everglades NP 1991 ## 137 5 3762 94660 EVER Everglades NP 1991 ## 138 6 4143 68937 EVER Everglades NP 1991 ## 139 7 4121 61878 EVER Everglades NP 1991 ## 140 8 3860 71602 EVER Everglades NP 1991 ## 141 9 3599 81298 EVER Everglades NP 1991 ## 142 10 4058 86312 EVER Everglades NP 1991 ## 143 11 4586 126458 EVER Everglades NP 1991 ## 144 12 5066 151982 EVER Everglades NP 1991 ## 145 1 6623 142197 EVER Everglades NP 1992 ## 146 2 5745 163917 EVER Everglades NP 1992 ## 147 3 6518 158688 EVER Everglades NP 1992 ## 148 4 5067 126842 EVER Everglades NP 1992 ## 149 5 4095 100595 EVER Everglades NP 1992 ## 150 6 3896 59923 EVER Everglades NP 1992 ## 151 7 4011 70128 EVER Everglades NP 1992 ## 152 8 2615 59786 EVER Everglades NP 1992 ## 153 9 0 7610 EVER Everglades NP 1992 ## 154 10 0 23820 EVER Everglades NP 1992 ## 155 11 0 30644 EVER Everglades NP 1992 ## 156 12 101 81536 EVER Everglades NP 1992 ## 157 1 7386 106855 EVER Everglades NP 1993 ## 158 2 7199 119887 EVER Everglades NP 1993 ## 159 3 8078 121353 EVER Everglades NP 1993 ## 160 4 7478 96384 EVER Everglades NP 1993 ## 161 5 7178 76531 EVER Everglades NP 1993 ## 162 6 6816 62341 EVER Everglades NP 1993 ## 163 7 6752 66214 EVER Everglades NP 1993 ## 164 8 6317 61743 EVER Everglades NP 1993 ## 165 9 6773 51114 EVER Everglades NP 1993 ## 166 10 7322 58058 EVER Everglades NP 1993 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 338 rows ] # Theodore Roosevelt unit_visitation(park = &quot;THRO&quot;, start_year = &quot;1980&quot;, end_year = &quot;2021&quot;) ## Month NonRecreationVisitors RecreationVisitors UnitCode UnitName Year ## 1 1 623 7163 THRO Theodore Roosevelt NP 1980 ## 2 2 623 9360 THRO Theodore Roosevelt NP 1980 ## 3 3 623 13600 THRO Theodore Roosevelt NP 1980 ## 4 4 623 23208 THRO Theodore Roosevelt NP 1980 ## 5 5 623 45336 THRO Theodore Roosevelt NP 1980 ## 6 6 623 95326 THRO Theodore Roosevelt NP 1980 ## 7 7 623 139403 THRO Theodore Roosevelt NP 1980 ## 8 8 623 134231 THRO Theodore Roosevelt NP 1980 ## 9 9 623 58950 THRO Theodore Roosevelt NP 1980 ## 10 10 623 33584 THRO Theodore Roosevelt NP 1980 ## 11 11 623 20215 THRO Theodore Roosevelt NP 1980 ## 12 12 623 15358 THRO Theodore Roosevelt NP 1980 ## 13 1 623 12863 THRO Theodore Roosevelt NP 1981 ## 14 2 623 11869 THRO Theodore Roosevelt NP 1981 ## 15 3 623 23660 THRO Theodore Roosevelt NP 1981 ## 16 4 623 31275 THRO Theodore Roosevelt NP 1981 ## 17 5 623 47800 THRO Theodore Roosevelt NP 1981 ## 18 6 623 118774 THRO Theodore Roosevelt NP 1981 ## 19 7 623 160099 THRO Theodore Roosevelt NP 1981 ## 20 8 623 150545 THRO Theodore Roosevelt NP 1981 ## 21 9 623 73994 THRO Theodore Roosevelt NP 1981 ## 22 10 623 38338 THRO Theodore Roosevelt NP 1981 ## 23 11 623 20757 THRO Theodore Roosevelt NP 1981 ## 24 12 623 12899 THRO Theodore Roosevelt NP 1981 ## 25 1 623 11132 THRO Theodore Roosevelt NP 1982 ## 26 2 623 10927 THRO Theodore Roosevelt NP 1982 ## 27 3 623 20793 THRO Theodore Roosevelt NP 1982 ## 28 4 623 25464 THRO Theodore Roosevelt NP 1982 ## 29 5 623 46622 THRO Theodore Roosevelt NP 1982 ## 30 6 623 120067 THRO Theodore Roosevelt NP 1982 ## 31 7 623 170939 THRO Theodore Roosevelt NP 1982 ## 32 8 623 144195 THRO Theodore Roosevelt NP 1982 ## 33 9 623 71313 THRO Theodore Roosevelt NP 1982 ## 34 10 623 33194 THRO Theodore Roosevelt NP 1982 ## 35 11 623 18156 THRO Theodore Roosevelt NP 1982 ## 36 12 623 4212 THRO Theodore Roosevelt NP 1982 ## 37 1 623 3175 THRO Theodore Roosevelt NP 1983 ## 38 2 623 4303 THRO Theodore Roosevelt NP 1983 ## 39 3 623 4954 THRO Theodore Roosevelt NP 1983 ## 40 4 623 17147 THRO Theodore Roosevelt NP 1983 ## 41 5 623 33260 THRO Theodore Roosevelt NP 1983 ## 42 6 623 75517 THRO Theodore Roosevelt NP 1983 ## 43 7 623 118911 THRO Theodore Roosevelt NP 1983 ## 44 8 623 105025 THRO Theodore Roosevelt NP 1983 ## 45 9 623 42446 THRO Theodore Roosevelt NP 1983 ## 46 10 623 6556 THRO Theodore Roosevelt NP 1983 ## 47 11 623 2224 THRO Theodore Roosevelt NP 1983 ## 48 12 623 1600 THRO Theodore Roosevelt NP 1983 ## 49 1 623 308 THRO Theodore Roosevelt NP 1984 ## 50 2 623 663 THRO Theodore Roosevelt NP 1984 ## 51 3 623 2250 THRO Theodore Roosevelt NP 1984 ## 52 4 623 4341 THRO Theodore Roosevelt NP 1984 ## 53 5 623 29993 THRO Theodore Roosevelt NP 1984 ## 54 6 623 64834 THRO Theodore Roosevelt NP 1984 ## 55 7 623 101202 THRO Theodore Roosevelt NP 1984 ## 56 8 623 97898 THRO Theodore Roosevelt NP 1984 ## 57 9 623 37555 THRO Theodore Roosevelt NP 1984 ## 58 10 623 16078 THRO Theodore Roosevelt NP 1984 ## 59 11 623 4619 THRO Theodore Roosevelt NP 1984 ## 60 12 623 1398 THRO Theodore Roosevelt NP 1984 ## 61 1 434 1137 THRO Theodore Roosevelt NP 1985 ## 62 2 434 1217 THRO Theodore Roosevelt NP 1985 ## 63 3 434 3940 THRO Theodore Roosevelt NP 1985 ## 64 4 623 4273 THRO Theodore Roosevelt NP 1985 ## 65 5 623 35961 THRO Theodore Roosevelt NP 1985 ## 66 6 623 73947 THRO Theodore Roosevelt NP 1985 ## 67 7 623 101254 THRO Theodore Roosevelt NP 1985 ## 68 8 623 96851 THRO Theodore Roosevelt NP 1985 ## 69 9 623 35952 THRO Theodore Roosevelt NP 1985 ## 70 10 623 16229 THRO Theodore Roosevelt NP 1985 ## 71 11 434 4980 THRO Theodore Roosevelt NP 1985 ## 72 12 434 1411 THRO Theodore Roosevelt NP 1985 ## 73 1 434 772 THRO Theodore Roosevelt NP 1986 ## 74 2 434 573 THRO Theodore Roosevelt NP 1986 ## 75 3 434 3346 THRO Theodore Roosevelt NP 1986 ## 76 4 623 3700 THRO Theodore Roosevelt NP 1986 ## 77 5 623 31355 THRO Theodore Roosevelt NP 1986 ## 78 6 623 76456 THRO Theodore Roosevelt NP 1986 ## 79 7 623 115276 THRO Theodore Roosevelt NP 1986 ## 80 8 623 113280 THRO Theodore Roosevelt NP 1986 ## 81 9 623 34005 THRO Theodore Roosevelt NP 1986 ## 82 10 623 9507 THRO Theodore Roosevelt NP 1986 ## 83 11 434 1320 THRO Theodore Roosevelt NP 1986 ## 84 12 434 963 THRO Theodore Roosevelt NP 1986 ## 85 1 434 720 THRO Theodore Roosevelt NP 1987 ## 86 2 434 713 THRO Theodore Roosevelt NP 1987 ## 87 3 434 5767 THRO Theodore Roosevelt NP 1987 ## 88 4 623 13479 THRO Theodore Roosevelt NP 1987 ## 89 5 623 31685 THRO Theodore Roosevelt NP 1987 ## 90 6 623 77864 THRO Theodore Roosevelt NP 1987 ## 91 7 623 115896 THRO Theodore Roosevelt NP 1987 ## 92 8 623 111272 THRO Theodore Roosevelt NP 1987 ## 93 9 623 45217 THRO Theodore Roosevelt NP 1987 ## 94 10 623 16463 THRO Theodore Roosevelt NP 1987 ## 95 11 434 4318 THRO Theodore Roosevelt NP 1987 ## 96 12 434 1452 THRO Theodore Roosevelt NP 1987 ## 97 1 434 976 THRO Theodore Roosevelt NP 1988 ## 98 2 434 1536 THRO Theodore Roosevelt NP 1988 ## 99 3 434 3122 THRO Theodore Roosevelt NP 1988 ## 100 4 623 10509 THRO Theodore Roosevelt NP 1988 ## 101 5 623 32945 THRO Theodore Roosevelt NP 1988 ## 102 6 623 74553 THRO Theodore Roosevelt NP 1988 ## 103 7 623 113439 THRO Theodore Roosevelt NP 1988 ## 104 8 623 103574 THRO Theodore Roosevelt NP 1988 ## 105 9 623 46566 THRO Theodore Roosevelt NP 1988 ## 106 10 623 19343 THRO Theodore Roosevelt NP 1988 ## 107 11 434 5425 THRO Theodore Roosevelt NP 1988 ## 108 12 434 1539 THRO Theodore Roosevelt NP 1988 ## 109 1 434 1243 THRO Theodore Roosevelt NP 1989 ## 110 2 434 835 THRO Theodore Roosevelt NP 1989 ## 111 3 434 7436 THRO Theodore Roosevelt NP 1989 ## 112 4 623 14956 THRO Theodore Roosevelt NP 1989 ## 113 5 623 36527 THRO Theodore Roosevelt NP 1989 ## 114 6 623 87021 THRO Theodore Roosevelt NP 1989 ## 115 7 623 120566 THRO Theodore Roosevelt NP 1989 ## 116 8 623 111204 THRO Theodore Roosevelt NP 1989 ## 117 9 623 47975 THRO Theodore Roosevelt NP 1989 ## 118 10 623 20252 THRO Theodore Roosevelt NP 1989 ## 119 11 434 9516 THRO Theodore Roosevelt NP 1989 ## 120 12 434 1640 THRO Theodore Roosevelt NP 1989 ## 121 1 434 1044 THRO Theodore Roosevelt NP 1990 ## 122 2 434 1339 THRO Theodore Roosevelt NP 1990 ## 123 3 434 3636 THRO Theodore Roosevelt NP 1990 ## 124 4 623 16226 THRO Theodore Roosevelt NP 1990 ## 125 5 623 39255 THRO Theodore Roosevelt NP 1990 ## 126 6 623 88320 THRO Theodore Roosevelt NP 1990 ## 127 7 623 131586 THRO Theodore Roosevelt NP 1990 ## 128 8 623 118057 THRO Theodore Roosevelt NP 1990 ## 129 9 623 46139 THRO Theodore Roosevelt NP 1990 ## 130 10 623 9207 THRO Theodore Roosevelt NP 1990 ## 131 11 434 4326 THRO Theodore Roosevelt NP 1990 ## 132 12 434 1583 THRO Theodore Roosevelt NP 1990 ## 133 1 434 1387 THRO Theodore Roosevelt NP 1991 ## 134 2 434 1462 THRO Theodore Roosevelt NP 1991 ## 135 3 434 4332 THRO Theodore Roosevelt NP 1991 ## 136 4 623 13501 THRO Theodore Roosevelt NP 1991 ## 137 5 623 34713 THRO Theodore Roosevelt NP 1991 ## 138 6 623 83363 THRO Theodore Roosevelt NP 1991 ## 139 7 623 127724 THRO Theodore Roosevelt NP 1991 ## 140 8 623 129336 THRO Theodore Roosevelt NP 1991 ## 141 9 623 45886 THRO Theodore Roosevelt NP 1991 ## 142 10 623 20626 THRO Theodore Roosevelt NP 1991 ## 143 11 434 5220 THRO Theodore Roosevelt NP 1991 ## 144 12 434 1376 THRO Theodore Roosevelt NP 1991 ## 145 1 417 909 THRO Theodore Roosevelt NP 1992 ## 146 2 417 1026 THRO Theodore Roosevelt NP 1992 ## 147 3 472 3663 THRO Theodore Roosevelt NP 1992 ## 148 4 622 15052 THRO Theodore Roosevelt NP 1992 ## 149 5 623 35418 THRO Theodore Roosevelt NP 1992 ## 150 6 623 82069 THRO Theodore Roosevelt NP 1992 ## 151 7 622 134524 THRO Theodore Roosevelt NP 1992 ## 152 8 621 130518 THRO Theodore Roosevelt NP 1992 ## 153 9 624 47515 THRO Theodore Roosevelt NP 1992 ## 154 10 482 20176 THRO Theodore Roosevelt NP 1992 ## 155 11 472 4435 THRO Theodore Roosevelt NP 1992 ## 156 12 417 632 THRO Theodore Roosevelt NP 1992 ## 157 1 417 748 THRO Theodore Roosevelt NP 1993 ## 158 2 417 814 THRO Theodore Roosevelt NP 1993 ## 159 3 472 2212 THRO Theodore Roosevelt NP 1993 ## 160 4 622 14042 THRO Theodore Roosevelt NP 1993 ## 161 5 623 37693 THRO Theodore Roosevelt NP 1993 ## 162 6 623 80340 THRO Theodore Roosevelt NP 1993 ## 163 7 622 125177 THRO Theodore Roosevelt NP 1993 ## 164 8 621 136519 THRO Theodore Roosevelt NP 1993 ## 165 9 624 49363 THRO Theodore Roosevelt NP 1993 ## 166 10 482 22456 THRO Theodore Roosevelt NP 1993 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 338 rows ] 1.4 Iterations At this point, we now know how to develop functions so that we do not have to keep writing out redundant steps in a workflow. However, in that last exercise, you can see that we are still writing out redundant code; we are performing the exact same function on each of our three park units. Another tool for reducing redundancy is iteration, which allows you to do the same thing on multiple inputs. Iteration can happen across different objects, different rows, different data frames, the list goes on and on! 1.4.1 For loops A for loop is base R‚Äôs iteration tool that executes code across a vector, an array, a list, etc. To save the outcome of each iteration, you must first create a vector to store the outputs in that is sized based on how many objects you want to iterate over. For example, I want to run our parkwide_visitation() function over the last five years: 2017, 2018, 2019, 2020, and 2021. To do that, I will first need to develop a vector listing each year: years &lt;- c(&#39;2017&#39;, &#39;2018&#39;, &#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;) ‚Ä¶ and then develop an empty list to store each year‚Äôs parkwide_visitation() results (i.e., output) into: output_floop &lt;- vector(&quot;list&quot;, length = length(years)) Now that we have a place to store each year‚Äôs function results, we can move forward with the for loop itself: for(i in 1:length(years)){ output_floop[[i]] &lt;- parkwide_visitation(year = years[i]) } ‚Ä¶ where years[i] tells the for loop to perform parkwide_visitation() on the ith year (think of i as a moving across each year), and output_floop[[i]] directs the for loop to store the results of the ith year‚Äôs run into output‚Äôs ith list (think of output_floop[[i]] as the location in output_floop that the ith‚Äôs results go). We now have a list containing five data frames: one for each year of visitation data: summary(output_floop) ## Length Class Mode ## [1,] 6 data.frame list ## [2,] 6 data.frame list ## [3,] 6 data.frame list ## [4,] 6 data.frame list ## [5,] 6 data.frame list Because each year‚Äôs output is structured identically, we can confidently combine each year‚Äôs data frame into a single data frame using dplyr::bind_rows(): multi_years &lt;- dplyr::bind_rows(output_floop) 1.4.2 Exercise #6 Use a for loop to run unit_visitation() with arguments start_year = 1980 and end_year = 2021 across ROMO, EVER, and THRO. Then, create a single data frame containing each park units‚Äô output. (Hint: Your first step will be to create a vector listing each park unit.) # vector list of parks parks &lt;- c(&#39;ROMO&#39;, &#39;EVER&#39;, &#39;THRO&#39;) # my empty list output_doop &lt;- vector(&quot;list&quot;, length = length(parks)) # the &#39;for&#39; loop for(i in 1:length(parks)){ output_doop[[i]] &lt;- unit_visitation(park = parks[i], start_year = &quot;1980&quot;, end_year = &quot;2021&quot;) } summary(output_doop) ## Length Class Mode ## [1,] 6 data.frame list ## [2,] 6 data.frame list ## [3,] 6 data.frame list multi_parks &lt;- dplyr::bind_rows(output_doop) str(multi_parks) ## &#39;data.frame&#39;: 1512 obs. of 6 variables: ## $ Month : int 1 2 3 4 5 6 7 8 9 10 ... ## $ NonRecreationVisitors: int 28 44 24 142 98 2384 3748 3634 1472 532 ... ## $ RecreationVisitors : int 42902 59403 58790 64299 93210 410449 573465 609383 389771 219495 ... ## $ UnitCode : chr &quot;ROMO&quot; &quot;ROMO&quot; &quot;ROMO&quot; &quot;ROMO&quot; ... ## $ UnitName : chr &quot;Rocky Mountain NP&quot; &quot;Rocky Mountain NP&quot; &quot;Rocky Mountain NP&quot; &quot;Rocky Mountain NP&quot; ... ## $ Year : int 1980 1980 1980 1980 1980 1980 1980 1980 1980 1980 ... 1.5 Mapping The tidyverse‚Äôs purrr package has its own iteration function, map(), that is a variation of the for loop. map() takes a vector and applies a single function across it, then automatically stores all of the results into a list. In other words, map() creates an appropriately sized list to store our results in for us. This eliminates the need to create an empty list ahead of time. To create the same output as our previous for loop on parkwide_visitation(), but using map() instead, we would run the following code: output_map &lt;- years %&gt;% map(~ parkwide_visitation(year = .)) ‚Ä¶ where ~ indicates that we want to perform parkwide_visitation() across all years, and . indicates that we want to use our piped vector, years, as the input to the year argument. As you can see, output_map is identical to output_floop: identical(output_floop, output_map) ## [1] TRUE ‚Ä¶ which means we should also bind_rows() to get the mapped output into a single data frame: multi_years &lt;- bind_rows(output_map) 1.5.1 Exercise #7 Use map() to run unit_visitation() with arguments start_year = 1980 and end_year = 2021 across ROMO, EVER, and THRO. Then, create a single data frame containing each park units‚Äô output. # create the output map unit_output_map &lt;- parks %&gt;% map(~ unit_visitation(park = ., start_year = &quot;1980&quot;, end_year = &quot;2021&quot;)) # check if they are identical identical(output_doop, unit_output_map) #TRUE ## [1] TRUE # bind_rows multi_parks &lt;- bind_rows(unit_output_map) "],["data-munging-week-3.html", "Chapter 2 Data Munging (week 3) 2.1 Pulling in necessary packages and data sets 2.2 Exploring our data 2.3 Pivoting 2.4 Joining", " Chapter 2 Data Munging (week 3) 2.0.1 Lesson Objectives In the last lesson, we learned how to pull data from an API and reduce redundancies in our workflows through functions and iterations. In this lesson we will use the functions in the previous lesson to learn how to manipulate data frames with the tidyverse, and plot elegant time series graphs with the ggplot(), scales and plotly packages. There are five exercises in this lesson that must be completed. 2.1 Pulling in necessary packages and data sets library(tidyverse) library(httr) library(jsonlite) library(plotly) library(scales) Using the parkwide_visitation() function from the last lesson and mapping, let‚Äôs pull park-wide visitor data from 1980-2021, and name the final object parkwide. (Code hack: we can use 1980:2021 to create a vector of years so we don‚Äôt have to write each year out!) parkwide_visitation &lt;- function(year){ raw_data &lt;- httr::GET(url = paste0(&quot;https://irmaservices.nps.gov/v3/rest/stats/total/&quot;, year)) extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data) } years &lt;- (1980:2021) parkwide &lt;- years %&gt;% map(~ parkwide_visitation(year = .)) %&gt;% bind_rows() 2.1.1 Exercise #1 Using the unit_visitation() function from the last lesson and mapping, pull visitor data from 1980-2021 for the following park units: ROMO, ACAD, LAKE, YELL, GRCA, ZION, OLYM, and GRSM. Name the final output units. parks &lt;- c(&quot;ROMO&quot;, &quot;ACAD&quot;, &quot;LAKE&quot;, &quot;YELL&quot;, &quot;GRCA&quot;, &quot;ZION&quot;, &quot;OLYM&quot;, &quot;GRSM&quot;) units &lt;- parks %&gt;% map(~ unit_visitation(park = ., start_year = &quot;1980&quot;, end_year = &quot;2021&quot;)) %&gt;% bind_rows() view(units) 2.2 Exploring our data Look at the data frame structure of parkwide and units; they‚Äôre exactly the same! So let‚Äôs go ahead and bind those together: visitation &lt;- bind_rows(parkwide, units) ‚Ä¶ except, the rows in parkwide‚Äôs UnitCode and UnitCode columns are empty. üòë Let‚Äôs fix the UnitCode column to list ‚ÄúParkwide‚Äù using mutate() and an ifelse() statement: visitation &lt;- visitation %&gt;% mutate(UnitCode = ifelse(is.na(UnitCode), &quot;Parkwide&quot;, UnitCode)) Think of the above ifelse() operation as: ‚ÄúIf the column UnitCode is NA, replace NA with Parkwide. Otherwise, preserve what is already in the UnitCode column.‚Äù Now that we have a single data set containing all of the NPS visitation data that we‚Äôve pulled, let‚Äôs start exploring it! But first, let‚Äôs aggregate the monthly data into annual data using group_by() and summarize(): yearly &lt;- visitation %&gt;% group_by(UnitCode, Year) %&gt;% # we only care about recreational visitors: summarize(RecVisitation = sum(RecreationVisitors)) yearly What does visitation data look like through time? First we can try to graph all of the park units together: ggplot(data=yearly)+ geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + theme_bw(base_size=10) ‚Ä¶ yikes, not surprisingly, parkwide visitation is wayyyy higher than our individual unit‚Äôs visitation data, making our graph pretty useless. It might be nice to have each park unit in a graph of its own. We can create individual graphs for each unit using facet_wrap(), and set the y-axes for each plot to \"free_y\": ggplot(data=yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + facet_wrap(~UnitCode, scales = &quot;free_y&quot;) + theme_bw(base_size=10) We can also make this plot interactive by feeding it into plotly‚Äôs ggplotly() function: plotly::ggplotly( ggplot(data=yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + facet_wrap(~UnitCode, scales = &quot;free_y&quot;) + theme_bw(base_size=10) ) 2.2.1 Exercise #2 Create an interactive graph with two separate panes: one showing park-wide visitation, the other showing all the individual park units together. Both panes should have different y-axes. plotly::ggplotly( ggplot(data = yearly) + geom_point(aes(x = Year, y = RecVisitation, color = UnitCode)) + geom_path(aes(x = Year, y = RecVisitation, color = UnitCode)) + scale_y_continuous(labels = scales::label_scientific()) + # facet wrap by unit code where one group unitecode == &quot;parkwide&quot; and one group is all other data facet_wrap(~UnitCode == &quot;Parkwide&quot;, scales = &quot;free_y&quot;) + theme_bw(base_size=10) ) It is pretty clear that some park units get orders of magnitude more visitors than others. But just how much of the total park visitation do each of these parks account for from year to year? Here we walk through two methods to tackle this question, pivoting and joining, to get park unit visitation side-by-side with park-wide data. 2.3 Pivoting Currently, our yearly data is considered narrow because we have all of our NPS visitation data in one column, with multiple rows representing the same year. We can make this data wide by using the function pivot_wider() wide_data &lt;- yearly %&gt;% select(Year, UnitCode, RecVisitation) %&gt;% pivot_wider(., names_from = UnitCode, values_from = RecVisitation) ‚Ä¶ where names_from represents the column with the values you are hoping to spread into new columns, and values_from represents the data you want to fill these new columns with. We can make the data set narrow again by using the function pivot_longer(): narrow_data &lt;- wide_data %&gt;% pivot_longer(cols = -Year, names_to = &quot;Park&quot;, values_to = &quot;RecVisitation&quot;) ‚Ä¶ where cols are the columns we want to gather into one column (or, the column(s) you DON‚ÄôT want to gather), while names_to and values_to are the names of the new columns produced from the pivot. 2.3.1 Exercise #3 Using wide_data as the starting point, create an interactive time series plot showing the annual percentage of the total visitation made up by all park units. # create dataframe where park name is one column, percentage is the other, keep year prop_data &lt;- wide_data %&gt;% mutate_at(.vars = c(&quot;ACAD&quot;, &quot;GRCA&quot;, &quot;GRSM&quot;, &quot;LAKE&quot;, &quot;OLYM&quot;, &quot;ROMO&quot;, &quot;YELL&quot;, &quot;ZION&quot;), .funs = ~(./Parkwide)*100) %&gt;% #select(-Parkwide) %&gt;% if you wanted to removed the whole parkwide column pivot_longer(cols = -c(Parkwide, Year), names_to = &quot;Park&quot;, values_to = &quot;Percent&quot;) plotly::ggplotly( ggplot(data = prop_data) + geom_point(aes(x = Year, y = Percent, color = Park)) + geom_path(aes(x = Year, y = Percent, color = Park)) + theme_bw(base_size=10) ) 2.4 Joining Another way of getting park-wide visitation side-by-side with the park unit data is through the use of joining our original units and parkwide data sets: joined_data &lt;- inner_join(x = units, y = parkwide, by = c(&quot;Year&quot;,&quot;Month&quot;)) ‚Ä¶ where x and y are the two data sets you want joined, and by indicates the column(s) to match them by. Note: there are several ways of joining data. Explore them with ?`mutate-joins` and ?`filter-joins`. 2.4.1 Exercise #4 Using joined_data as the starting point, create an interactive time series plot showing the annual percentage of the total visitation made up by all park units. This plot should look nearly identical to the previous plot. prop_joined_data &lt;- joined_data %&gt;% group_by(UnitCode.x, Year) %&gt;% summarize(RecVisitation = sum(RecreationVisitors.x), Parkwide = sum(RecreationVisitors.y)) %&gt;% mutate(Percent = (RecVisitation/Parkwide) *100) plotly::ggplotly( ggplot(data = prop_joined_data) + geom_point(aes(x = Year, y = Percent, color = UnitCode.x)) + geom_path(aes(x = Year, y = Percent, color = UnitCode.x)) + theme_bw(base_size=10) ) 2.4.2 Exercise #5 Which park on average has the most visitation? Which park has the least visitation? Base your response on the data starting in 1990, ending in 2021. Defend your answer with numbers! Grand Canyon National Park (GRCA) had the most visitors on average, with 15097621 visits per year. From 1980 to 2021, GRCA visitation made up 3.5028724% of all national park visitation. Acadia National Park (ACAD) had the least visitors on average, with 4017167 visits per year. From 1980 to 2021, ACAD visitation made up 0.9320424% of all national park visitation. yrs90to21 &lt;- (1990:2021) parkwide90to21 &lt;- yrs90to21 %&gt;% map(~ parkwide_visitation(year = .)) %&gt;% bind_rows() visits90to21 &lt;- parks %&gt;% map(~ unit_visitation(park = ., start_year = &quot;1990&quot;, end_year = &quot;2021&quot;)) %&gt;% bind_rows() joined_90to21 &lt;- inner_join(x = visits90to21, y = parkwide90to21, by = c(&quot;Year&quot;,&quot;Month&quot;)) %&gt;% group_by(UnitCode.x) %&gt;% summarise(RecVisitation = sum(RecreationVisitors.x), Parkwide = sum(RecreationVisitors.y)) %&gt;% mutate(percent = (RecVisitation/Parkwide) *100, AvgVisitsperYear = (RecVisitation/21)) "],["denoucement-week-3.html", "Chapter 3 Denoucement (week 3) 3.1 Lesson Objectives: 3.2 Streaflow Datasets 3.3 Exercise #1 3.4 Exercise #2 3.5 Exercise #3 3.6 Exercise #4 3.7 Exercise #5", " Chapter 3 Denoucement (week 3) 3.1 Lesson Objectives: In this lesson you will take all of the skills you have learned up to this point and use them on a completely new set of data. This lesson has five exercises that need to be completed. 3.1.0.1 Necessary packages: library(tidyverse) library(plotly) library(scales) library(httr) library(jsonlite) library(dataRetrieval) library(sf) # for the map library(mapview) # for making the interactive plot 3.2 Streaflow Datasets We are interested in looking at how the Cache la Poudre River‚Äôs flow changes as it travels out of the mountainous Poudre Canyon and through Fort Collins. There are four stream flow monitoring sites on the Poudre that we are interested in: two managed by the US Geological Survey (USGS), and two managed by the Colorado Division of Water Resources (CDWR): 3.2.1 USGS dataRetrieval R package To pull data for USGS stream gages, we can use the dataRetrieval package, which is a USGS-managed set of functions that, much like our functions from Lesson 3.1, pull data from the USGS‚Äôs data warehouse using an API. Here we will pull flow data for our USGS stream gages of interest for the last two water years: # pulls USGS daily (&#39;dv&#39;) stream flow data: usgs &lt;- dataRetrieval::readNWISdv(siteNumbers = c(&quot;06752260&quot;, &quot;06752280&quot;), # USGS site code for the Poudre River at the Lincoln Bridge and the ELC parameterCd = &quot;00060&quot;, # USGS code for stream flow startDate = &quot;2020-10-01&quot;, # YYYY-MM-DD formatting endDate = &quot;2022-09-30&quot;) %&gt;% # YYYY-MM-DD formatting rename(q_cfs = X_00060_00003) %&gt;% # USGS code for stream flow units in cubic feet per second (CFS) mutate(Date = lubridate::ymd(Date), # convert the Date column to &quot;Date&quot; formatting using the `lubridate` package Site = case_when(site_no == &quot;06752260&quot; ~ &quot;Lincoln&quot;, site_no == &quot;06752280&quot; ~ &quot;Boxelder&quot;)) 3.2.2 CDWR‚Äôs API Alas, CDWR does NOT have an R package that pulls data from their API, but they do have user-friendly directions on how to develop API calls. Using the ‚ÄúURL generator‚Äù steps outlined for their daily surface water time series data set, we can get the last two water years of CFS data for the Poudre at the Canyon mouth (site abbreviation = CLAFTCCO) using the following URL: https://dwr.state.co.us/Rest/GET/api/v2/surfacewater/surfacewatertsday/?format=json&amp;dateFormat=dateOnly&amp;fields=abbrev%2CmeasDate%2Cvalue%2CmeasUnit&amp;encoding=deflate&amp;abbrev=CLAFTCCO&amp;min-measDate=10%2F01%2F2020&amp;max-measDate=09%2F30%2F2022 3.3 Exercise #1 Using the URL above as the starting point, develop a function that creates a data frame of CDWR daily flow (CFS) data for a selected range of water years, for any site. (HINT: The final product of our API pull is a list with additional metadata about our API pull‚Ä¶ how do we index a list to extract the time series flow data?) co_water &lt;- function(site, start_wyear, end_wyear){ raw_data&lt;-GET(url = paste0(&quot;https://dwr.state.co.us/Rest/GET/api/v2/surfacewater/surfacewatertsday/&quot;, &quot;?format=json&amp;dateFormat=dateOnly&amp;fields&quot;, &quot;=abbrev%2CmeasDate%2Cvalue%2CmeasUnit&amp;encoding=deflate&amp;abbrev=&quot;, site, &quot;&amp;min-measDate=10%2F01%2F&quot;, start_wyear -1, &quot;&amp;max-measDate=09%2F30%2F&quot;, end_wyear)) extracted_data &lt;- httr::content(raw_data, as = &quot;text&quot;, encoding = &quot;UTF-8&quot;) final_data &lt;- jsonlite::fromJSON(extracted_data) return(final_data[[5]]) } 3.4 Exercise #2 Map over the function you developed in Exercise #1 to pull flow data for CLAFTCCO and CLARIVCO for the 2021 and 2022 water years. places &lt;- c(&quot;CLAFTCCO&quot;, &quot;CLARIVCO&quot;) CDWR_data &lt;- places %&gt;% map(~ co_water(site = ., start_wyear = 2021, end_wyear = 2022)) %&gt;% bind_rows() CDWR_data$measDate &lt;- as.Date(CDWR_data$measDate) 3.5 Exercise #3 Join our USGS and CDWR data frames together (bind_rows(), perhaps?), then create an interactive ggplot of discharge (in CFS) through time displaying all four of our monitoring sites. Be sure all axes and labels are clear. CDWR &lt;- CDWR_data %&gt;% rename(., Date = measDate, q_cfs = value, Site = abbrev) %&gt;% select(Date, Site, q_cfs) USGS &lt;- usgs %&gt;% select(Date, Site, q_cfs) discharge &lt;- bind_rows(CDWR, USGS) plotly::ggplotly( ggplot(data=discharge) + geom_point(aes(x = Date, y = q_cfs, color = Site)) + geom_path(aes(x = Date, y = q_cfs, color = Site)) + ylab(&quot;Discharge (cfs)&quot;) + theme_bw(base_size=5) ) 3.6 Exercise #4 Create an interactive plot of the daily difference in discharge between the Cache la Poudre River at the canyon mouth and each of the sites downstream. Make sure your plot axes are clear. #prop_data &lt;- wide_data %&gt;% # mutate_at(.vars = c(&quot;ACAD&quot;, &quot;GRCA&quot;, &quot;GRSM&quot;, &quot;LAKE&quot;, &quot;OLYM&quot;, &quot;ROMO&quot;, &quot;YELL&quot;, &quot;ZION&quot;), .funs = ~(./Parkwide)*100) %&gt;% #select(-Parkwide) %&gt;% if you wanted to removed the whole parkwide column pivot_longer(cols = -c(Parkwide, Year), names_to = &quot;Park&quot;, values_to = &quot;Percent&quot;) wide_discahrge &lt;- discharge %&gt;% select(Date, Site, q_cfs) %&gt;% pivot_wider(., names_from = Site, values_from = q_cfs) dischargeDifferences &lt;- wide_discahrge %&gt;% mutate_at(.vars = c(&quot;CLARIVCO&quot;, &quot;Lincoln&quot;, &quot;Boxelder&quot;), .funs = ~(.-CLAFTCCO)) %&gt;% select(-CLAFTCCO) %&gt;% pivot_longer(cols = -c(Date), names_to = &quot;Site&quot;, values_to = &quot;difference&quot;) plotly::ggplotly( ggplot(data = dischargeDifferences) + geom_point(aes(x = Date, y = difference, color = Site)) + geom_path(aes(x = Date, y = difference, color = Site)) + facet_wrap(~Site) + theme_bw(base_size=10) ) 3.7 Exercise #5 For each of our downstream locations, calculate how many days the canyon mouth had LOWER flow. Is this what you expected? Why or why not? lessdiscahrgedays &lt;- filter(dischargeDifferences, difference&gt;0) %&gt;% group_by(Site) %&gt;% summarise(count=n()) Boxelder had 8 days where the canyon had lower flow, CLARIVCO had 38 days where the canyon had lower flow, and Lincoln has 59 days. This is not super surprising, as most of the time these sites would logically have less discharge than the canyon, save for a small number of days where this pattern deviates. "],["get-spacial-week-4.html", "Chapter 4 Get Spacial (week 4) 4.1 Vector Data 4.2 Raster Data", " Chapter 4 Get Spacial (week 4) In Week 1 you were introduced to working with geospatial data in R. This week you will dive deeper into wrangling, analyzing, and visualizing geospatial data. In this lesson you will be exposed to various R packages you can retrieve spatial data from and work through importing, wrangling, and saving various spatial data sets. Start off by updating your setup.R script (you can just copy it over from your previous lesson folders) and add these new packages to your list: rgbif soilDB source(&quot;setup.R&quot;) Set up the tmap mode to interactive for some quick exploitative mapping of all these various spatial data sets. tmap_mode(&quot;view&quot;) 4.1 Vector Data 4.1.1 US Census spatial data with tigris Import the counties shapefile for Colorado again as you did in Week 1, along with linear water features for Larimer county. counties &lt;- tigris::counties(state = &quot;CO&quot;) linear_features &lt;- linear_water(state = &quot;CO&quot;, county = &quot;Larimer&quot;) This linear features file is pretty meaty. Inspect all the unique names for the features, what naming pattern do you notice? Let‚Äôs filter this data set to only major rivers in the county, which all have ‚ÄòRiv‚Äô at the end of their name. For working with character strings, the stringr package is extremely helpful and a member of the Tidyverse. To filter rows that have a specific character string, you can use str_detect() within filter(). rivers &lt;- linear_features %&gt;% filter(str_detect(FULLNAME, &quot;Riv&quot;)) 4.1.2 Species Occurrence data with rgbif To experiment with point data (latitude/longitude), we are going to explore the rgbif package, which allows you to download species occurrences from the Global Biodiversity Information Facility (GBIF), a database of global species occurrences with over 2.2 billion records. We are going to import occurrence data for a couple of charismatic Colorado species: Elk Yellow-Bellied Marmot Western Tiger Salamander To pull occurrence data with this package you use the occ_data() function and give it a species name you want to retrieve data for. Since we want to perform this operation for three species, this is a good opportunity to work through the iterative coding lessons you learned last week. We first need to create a string of species scientific names to use in the download function, and create a second string with their associated common names (order matters, make sure the two strings match). #make a string of species names to use in the &#39;occ_data&#39; function species &lt;- c(&quot;Cervus canadensis&quot;, &quot;Marmota flaviventris&quot;, &quot;Ambystoma mavortium&quot;) #also make a string of common names common_name &lt;- c(&quot;Elk&quot;, &quot;Yellow-bellied Marmot&quot;, &quot;Western Tiger Salamander&quot;) 4.1.3 Exercise #1 The code below shows you the steps we want to import data for a single species. Convert this chunk of code to a for loop that iterates across each species scientific and common name. Tip for getting started: You will need to add a couple extra steps outside of the for loop, including first creating an empty list to hold each output of each iteration and after the for loop bind all elements of the list to a single data frame using bind_rows() . # workflow outline # species &lt;- species[1] #this overwrites the list of &#39;species&#39; for just one species # common_name &lt;- common_name[1] #making the for_loop #make a vector that is a list occ &lt;- vector(&quot;list&quot;, length = length(species)) #you MUST specify the length #make the loop - this says &#39;for each item in the list (i), do 1 of all the things in the length&#39; for (i in 1:length(occ)) { occ1 &lt;- occ_data( scientificName = species[i], hasCoordinate = TRUE, #we only want data with spatial coordinates geometry = st_bbox(counties), #filter to the state of CO limit = 2000 #optional set an upper limit for total occurrences to download ) %&gt;% .$data #return just the data frame. The &#39;.&#39; symbolizes the previous function&#39;s output. # add species name column as ID to use later occ1$ID &lt;- common_name[i] #clean by removing duplicate occurrences, ##to store data in a list, you MUST you DOUBLE brackets [[]] occ[[i]] &lt;- occ1 %&gt;% distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %&gt;% dplyr::select(Species = ID, decimalLatitude, decimalLongitude, year, month, basisOfRecord) } #bind rows final_occ &lt;- bind_rows(occ) occ &lt;- st_as_sf(final_occ, coords = c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;), crs = 4326) Once you have your full data frame of occurrences for all three species, convert it to a spatial sf points object with the CRS set to 4326. Name the final object occ. Note: we only used a few filter functions here available with the occ_data() function, but there are many more worth exploring! ?occ_data 4.1.3.1 Challenge! Re-write the for loop to retrieve each species occurrences but using purrr::map() instead. 4.1.4 SNOTEL data with soilDB The soilDB package allows access to many databases, one of which includes daily climate data from USDA-NRCS SCAN (Soil Climate Analysis Network) stations. We are particularly interested in the SNOTEL (Snow Telemetry) sites to get daily snow depth across Colorado. First, you will need to read in the site metadata to get location information. The metadata file is included with the soilDB package installation, and you can bring it into your environment with data() data(&#39;SCAN_SNOTEL_metadata&#39;, package = &#39;soilDB&#39;) 4.1.5 Exercise #2 Filter this metadata to only the ‚ÄòSNOTEL‚Äô sites and ‚ÄòLarimer‚Äô county, convert it to a spatial sf object (set the CRS to 4326, WGS 84), and name it ‚Äòsnotel_sites‚Äô. Larimer_Snotel &lt;- SCAN_SNOTEL_metadata %&gt;% filter(County == &quot;Larimer&quot;) snotel_sites &lt;- st_as_sf(Larimer_Snotel, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326) How many SNOTEL sites are located in Colorado? There are 8 SNOTEL sites in Colorado. 4.1.6 Exercise #3 Below is the string of operations you would use to import data for a single SNOTEL site for the years 2020 to 2022. Use purrr::map() to pull data for all unique SNOTEL sites in the snotel_sites object you just created. Coerce the data to a single data frame, then as a final step use left_join() to join the snow depth data to the station data to get the coordinates for all the sites, and make it a spatial object. #First Site ID Site &lt;- unique(snotel_sites$Site)[1] data &lt;- fetchSCAN(site.code = Site, year = 2020:2022) %&gt;% # this returns a list for each variable, bind them to a single df bind_rows() %&gt;% as_tibble() %&gt;% #filter just the snow depth site filter(sensor.id == &quot;SNWD.I&quot;) %&gt;% #remove metadata columns dplyr::select(-(Name:pedlabsampnum)) joined_data &lt;- left_join(data, snotel_sites) snotel_data &lt;- st_as_sf(joined_data, crs = 4326) 4.1.7 Save Vector Data Save all the vector objects you created above (counties, rivers, occurrences, and snotel) to a single .RData file in the data/ folder. For the purposes of reproducibility and peer review, you should name this file ‚Äòspatdat.RData‚Äô. save(counties, rivers, occ, snotel_data, file = &quot;data/spatdat.RData&quot;) 4.2 Raster Data 4.2.1 Elevation data with elevatr 4.2.2 Exercise #4 Follow instructions from the Week 1 spatial lesson to import elevation data for Colorado at a zoom level of 7 and write it to a .tif file in the data/ folder of this repo. Name the file ‚Äòelevation.tif‚Äô. Make sure to crop the raster layer to the extent of Colorado, and give it the name ‚ÄúElevation‚Äù. Produce a quick plot to show your final raster object. counties &lt;- counties(state = &quot;CO&quot;) #roads &lt;- roads(state = &quot;CO&quot;) elevation1 &lt;- get_elev_raster(counties, z = 7) elevation2 &lt;- rast(elevation1) print(elevation2) elevation &lt;- crop(elevation2, counties) print(elevation) qtm(elevation) writeRaster(elevation, file = &quot;data/elevation.tif&quot;) 4.2.3 Landcover data Read in the NLCD_CO.tif file in the data/ folder of the repo. Make note of the auxillary file .aux.xml with the .tif file. This raster represents National Land Cover Database (NLCD) 2019 CONUS landcover data downloaded from the MRLC website and aggregated to ~1km resolution. 4.2.4 Exercise #5 What is the purpose of this auxiliary file? How is this landcover raster data different from our elevation data? The auxiliary file is essentially a legend or ‚Äòkey‚Äô for the rater file; the raster data is just points with values attached to each, so the auxiliary file provides the information on what each of those points and values represent. "],["spacial-analysis-week-4.html", "Chapter 5 Spacial Analysis (week 4) 5.1 Load in spatial data 5.2 Distance Calculations 5.3 Buffers 5.4 Spatial Intersect 5.5 Raster Reclassification 5.6 Focal Statistics 5.7 Raster Extract", " Chapter 5 Spacial Analysis (week 4) In the first lesson this week you were exposed to various databases you can pull spatial data from and worked through importing, wrangling, and saving those spatial data types. Today we are going to use those data sets to perform a range of spatial analyses. You have briefly used the sf and terra packages so far in this course, but today we will be exploring them much more in depth using the wide range of spatial analysis operations they provide. You shouldn‚Äôt need to install any new packages for today: source(&quot;setup.R&quot;) 5.1 Load in spatial data To carry out today‚Äôs lesson you will need to read in the data you saved to your ‚Äòdata/‚Äô folder from the ‚Äòget-spatial‚Äô lesson: #load in all your vector data load(&quot;data/spatDat.RData&quot;) #read in the elevation and landcover rasters landcover &lt;- terra::rast(&quot;data/NLCD_CO.tif&quot;) elevation &lt;- terra::rast(&quot;data/elevation.tif&quot;) 5.2 Distance Calculations We‚Äôre going to start off today with some distance calculations. Using our species occurrence data, say we want to compare each species average distance to the nearest river. Throughout today we are going to be mapping our spatial data to quickly inspect it and get a visual of the data‚Äôs extent and characteristics, so lets set our tmap mode to interactive. tmap_mode(&quot;view&quot;) Quick view of all our points, colored by species: qtm(occ, symbols.col = &quot;Species&quot;) Now, calculating the distance to the nearest river involves point to line distance calculations, which we can perform with the sf package. Before performing any spatial operations, remember all of our spatial objects must be in the same CRS. Using what you learned in week one, check the CRS of the occurrences and rivers, and perform a spatial transformation if needed (for the sake of this lesson, keep data in NAD83). st_crs(rivers) st_crs(occ) st_crs(rivers) == st_crs(occ) #FALSE :( #complete this operation occ &lt;- st_transform(occ, st_crs(rivers)) 5.2.1 Exercise #1 Our occurrence data set covers all of Colorado, but rivers are only for Larimer County. So, we have to first filter our points to Larimer County. Explore the use of st_filter() and use it to filter points that are found within the Larimer County polygon (which you can filter/index from your counties object). Call the new object'occ_larimer and include a quick plot of the filtered points. # create object by filtering out only Larimer County from the &#39;counties&#39; data set occ_larimer &lt;- st_filter(occ, filter(counties, NAMELSAD == &quot;Larimer County&quot;), .predicate = st_intersects) qtm(occ_larimer) Great, now we just have species occurrences within Larimer County. Now for each point we want to calculate its distance to the nearest river. The most efficient way is to first find the nearest line feature for each point. We can do this with the st_nearest_feature() function. This function returns the index values (row number) of the river feature in the rivers spatial data frame that is closest in distance to each point. Here we are saving these index values in a new column of our Larimer occurrences that we will use later to calculate distances. occ_larimer$nearest_river &lt;- st_nearest_feature(occ_larimer, rivers) Now, for each point we can use the st_distance() function to calculate the distance to the nearest river feature, using the index value in our new ‚Äúnearest_river‚Äù column. Adding by_element = TRUE is necessary to tell the function to perform the distance calculations by element (row), which we will fill into a new column ‚Äúriver_dist_m‚Äù. occ_larimer$river_dist_m &lt;- st_distance(occ_larimer, rivers[occ_larimer$nearest_river, ], by_element = TRUE) Notice that the new column is more than just a numeric class, but a ‚Äúunits‚Äù class, specifying that the values are in meters. str(occ_larimer) 5.2.2 Exercise #2 Cool, now you have the distance to the nearest river (in meters) for each individual species occurrence, but you want the average distance for each species. Using what you know of the dplyr functions, calculate the species average distance, then re-create the bar plot below with ggplot2 to compare the averages (feel free to add more customization!): Hint: remember that the new distance column is a ‚Äòunits‚Äô data type and may throw an error. You will need to coerce that data type in order to complete the operation. occ_larimer$river_dist_m &lt;- as.numeric(occ_larimer$river_dist_m) str(occ_larimer) avg_distance &lt;- occ_larimer %&gt;% group_by(Species) %&gt;% summarise(avg_dist = mean(river_dist_m)) str(avg_distance) ggplot(avg_distance) + geom_col(mapping = aes(x=species, y=avg_dist, fill=Species)) + labs(y= &quot;Average Distance (m)&quot;, x = &quot;Species&quot;) 5.3 Buffers Alternatively, say you want to know what percentage of species‚Äô occurrences (points) were found within a specified distance of a river (calculated buffer). To do this we could add a buffer around our line features and filter the points that fall within that buffer zone. For this example let‚Äôs say we are interested in the 100 m buffer zone around a river. However, if you try this you‚Äôll notice this operation takes quite a while. river_buffer &lt;- st_buffer(rivers, dist = 100) Instead, a more efficient way would be to make a 100 m buffer around each point, and see how many of those buffers intersect with a river. occ_buffer &lt;- st_buffer(occ_larimer, dist = 100) Still takes a little bit of run time, but much faster than buffering each line feature. Our occ_buffer object is now a spatial polygon data frame, where each feature is an occurrence buffer with 100 m radius. 5.4 Spatial Intersect We can conduct spatial intersect operations using the function st_intersects(). This function checks if each individual buffer intersects with a river, and if so it returns an index value (row number) for each river feature it intersects. This function returns a list object for each buffer polygon, that will be empty if there are no intersections. We will add this as a column to our buffer data set, and then create a binary yes/no river intersection column based on those results (is the list empty or not?). river_intersections &lt;- st_intersects(occ_buffer, rivers) If we inspect this object, we see it is a list of the same length as our occ_buffer object, where each list element is either empty (no intersections) or a list of index numbers for the river features that do intersect that buffer. 5.4.1 Exercise #3 Create a new column in occ_buff that returns TRUE/FALSE if the buffer intersects with a river. Hint: make use of the length() function..we aren‚Äôt interested at this point in how many river features are within 100m of a species occurrence, just whether or not there was a river within the buffer or not. Second, calculate what percentage of occurrences are within 100 m of a river for each species using dplyr operations. The below code will get you started, however it doesn‚Äôt quite work. Why not? There is one line of code you need to add to the pipe operations for this to work, what is it? #LIVE CODING IN CLASS # what is the length of the first interger of river_intersections length(river_intersections[[1]]) # lengths() will treat river-intersections one element at a time, whereas lenth() is just the length of the list # CREATE NEW COLUMN THAT RETURNS &#39;TRUE&#39; or &#39;FALSE&#39; occ_buffer$buffer_intersect &lt;- lengths(river_intersections) &gt; 0 # PERCENTAGES; group by species, create new column for n(), new column &#39;percent river&#39; with calculation of percent, then st_drop_geometry to removed the geometry points from the dataset occ_buffer %&gt;% group_by(Species) %&gt;% summarise(total_occ = n(), percent_river = sum((buffer_intersect == TRUE)/total_occ)*100) %&gt;% st_drop_geometry() #ANOTHER WAY TO DO IT WITH A for loop occ_buffer &lt;- mutate(occ_buffer, occ_buff = 0) for (i in 1:length(river_intersections)) { occ_buffer$occ_buff[i] &lt;- if_else(length(river_intersections[[i]])&gt;0, 1, 0) } occ_buffer %&gt;% group_by(Species) %&gt;% mutate(percent_river = (sum(occ_buff == 1)/occ_buff)*100) %&gt;% summarise(total_occ = n()) 5.4.1.1 Reflection This analysis is just for teaching purposes, why would you be cautious about these results for answering real research questions? Think about how we filtered everything to a political boundary, what‚Äôs wrong with this method? This was not the best way to do this as the spacial boundaries do not necessarily align with the given species preferred habitat, potentially swaying the data one way or another if this political boundary happens to cover one species‚Äô habitat and not the others. Additionally, creating such large averages over time and geographic location might create inaccurate representations of the data. 5.5 Raster Reclassification So far we‚Äôve dealt with a bunch of vector data and associated analyses with the sf package. Now lets work through some raster data analysis using the terra package. First, lets explore the landcover raster by making a quick plot. qtm(landcover) This land cover data set includes attributes (land cover classes) associated with raster values. We can quickly view the frequency of each land cover type with the freq() function. freq(landcover) Use ggplot2 to turn this into a bar chart Show Answer freq(landcover) %&gt;% ggplot(aes(reorder(value, count), count)) + labs(x = &quot;&quot;) + geom_col() + coord_flip() # switch the axes to better view land cover class names Say we want to explore some habitat characteristics of our species of interest, and we are specifically interested in forest cover. Our first step is to create a new raster layer from our land cover layer representing percent forest cover. This will involve multiple operations, including raster reclassification and focal statistics. Specifically, say we want to calculate the average percentage of forest cover and urbanization within a 9x9 pixel moving window (remember since rasters are made up of pixels, the distances we use are dependent on the resolution of the raster). First , reclassify the land cover raster creating a new raster representing just forest/non-forest pixels. Since rasters are technically matrices, we can index and change values using matrix operations. Given this particular raster uses character names associated with values (thanks to the .aux file!), we can index by those names. #first assign landcover to a new object name so we can manipulate it while keeping the origian forest &lt;- landcover #where the raster equals any of the forest categories, set that value to 1 forest[forest %in% c(&quot;Deciduous Forest&quot;, &quot;Evergreen Forest&quot;, &quot;Mixed Forest&quot;)] &lt;- 1 #SPELLING IS IMPORTANT #now set all non forest pixels to NA forest[forest != 1] &lt;- NA Now plot the new forest layer to get a quick sense if it looks accurate or not. plot(forest) 5.6 Focal Statistics Now we are going to perform focal statistics with the focal() function, which is a spatial operation that calculates new values for each cell based on a specified moving window. For this example we are going to calculate within a 9x9km moving window (since our pixel resolution is 1km). We supply this to the w = argument as a matrix, where the first value is the weight of each pixel, and the second two are the number of rows and columns. Second we use the ‚Äúsum‚Äù function, since each forest pixel has a value of 1 we will get the total number of forest pixels within the moving window, and then later divide the values by the total number of pixels in the window (81) to get the percentage. The final raster values will represent for each pixel the surrounding forest percentage (within ~4.5 km radius). forest_pct &lt;- terra::focal(forest, w=matrix(1,9,9), fun = &quot;sum&quot;, na.rm = TRUE) forest_pct &lt;- forest_pct/81 plot(forest_pct) Next, we wanted to know the percent forest cover associated with each species occurrence. Since we are now working with multiple spatial objects, we have to first check they are all in the same CRS and if not transform the data before any spatial operations. crs(forest_pct) st_crs(occ) 5.6.1 Exercise #4 Looks like the raster layer is in a different CRS. Reproject this so we can use it with our vector data (which are all in NAD83) using the project() function from terra, and write a line of code that checks whether or not the new object and the occ object have the same CRS forest_pct &lt;- terra::project(forest_pct, crs(occ)) crs(forest_pct) == crs(occ) 5.7 Raster Extract Now we can use the extract() function to extract the raster pixel value at each occurrence. terra::extract(forest_pct, occ) 5.7.1 Exercise #5 Notice that this returns a 2 column data frame, with an ID for each feature (occurrence) and the extracted raster value in the second column. How would you write this line of extract() code to add a single column to the occurrence data set of just the forest percentage value? Hint: Use your knowledge of indexing! occ &lt;- mutate(occ, terra::extract(forest_pct, occ)) Then calculate the average forest cover for each species. On average, which species is associated with the highest percentage of forest cover? occ$forest_percent &lt;- terra::extract(forest_pct, occ)[,2] occ_forest_cover &lt;- occ %&gt;% group_by(Species) %&gt;% na.omit() %&gt;% summarise(mean= mean(forest_percent)) On average, Elk are associated with the highest percent forest cover. Create a boxplot to compare the spread of values across species. ggplot(occ_forest_cover) + geom_col(mapping = aes(x=Species, y=mean, fill=Species)) + labs(y= &quot;Average % Forest Cover (m)&quot;, x = &quot;Species&quot;) That‚Äôs one way to use the extract() function. We can also extract raster values within polygons, and supply a function to summarize those raster values. 5.7.2 Exercise #6 Calculate the most common landcover type in each Colorado county, working through the following steps filling in the necessary code: Project the landcover raster to the CRS of the counties shapefile landcover_prj &lt;- terra::project(landcover, crs(counties)) Add a new column to counties that is the most common land cover type, using the function modal within extract(). counties$common_landcover &lt;- terra::extract(landcover_prj, counties, fun = modal) ?terra::extract() Notice however that this returns the raw raster values, which are not informative to us without knowing the associated landcover classes. Since we have the associated auxillary file with this raster, we can extract metadata to get the value/class pairs with the cats() function. cats_landcover &lt;- cats(landcover) Look at what class this function returns though. Coerce this into a data frame (there are multiple ways you could do this). Once you have have it as a data frame, use some dplyr operations to select just the value and land cover class columns, and remove all the empty rows (i.e., those without a landcover class). This should return a data frame of 17 rows. Call it nlcd_classes. #occ_buffer$buffer_intersect &lt;- lengths(river_intersections) &gt; 0 things &lt;- as.data.frame(cats_landcover) %&gt;% group_by(NLCD.Land.Cover.Class) %&gt;% na.omit(NLCD.Land.Cover.Class) # zeros &lt;- rowSums(things == 0) == ncol(things) nlcd_classes &lt;- things %&gt;% filter(rowSums(across(everything(), ~ . == 0)) !=ncol(things)) #nlcd_classes &lt;- raster::as.data.frame(cats_landcover, xy = TRUE, na.rm = FALSE) %&gt;% # na.omit() %&gt;% # select(value, NLCD.Land.Cover.Class) Then tie nlcd_classes to the counties data frame with left_join(), which will join two data frames by a common variable. In this case, your common variable is the raw raster value. Look at the documentation for left_join() and how you use the by = argument to complete this step. Finally, create a map of Colorado counties that is colored by the most common landcover type (using the class, not the raw value) in each county. The map can be interactive or static, but must include a legend. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
